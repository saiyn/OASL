<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\TM4C1290.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\TM4C1290.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Mar 28 14:40:15 2016
<BR><P>
<H3>Maximum Stack Usage =       1096 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MdcEventLoop &rArr; mdc_poll_handler &rArr; mdc_usb_task &rArr; sys_mdc_usb_msg_handler &rArr; do_file_seek &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[26]">Reset_Handler</a>
 <LI><a href="#[2fc]">__user_initial_stackheap</a>
 <LI><a href="#[27]">NmiSR</a>
 <LI><a href="#[28]">FaultISR</a>
 <LI><a href="#[29]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[af]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[af]">SysCtlDelay</a><BR>
 <LI><a href="#[27]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">NmiSR</a><BR>
 <LI><a href="#[28]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">FaultISR</a><BR>
 <LI><a href="#[29]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">IntDefaultHandler</a><BR>
 <LI><a href="#[bc]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc]">UARTConfigSetExpClk</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[57]">BtTaskEventLoop</a> from bt_task.o(.text) referenced from osal_task.o(.constdata)
 <LI><a href="#[43]">DMAUSBIntHandler</a> from usbdma.o(i.DMAUSBIntHandler) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[45]">DMAUSBIntStatusClear</a> from usbdma.o(i.DMAUSBIntStatusClear) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[46]">DMAUSBStatus</a> from usbdma.o(i.DMAUSBStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[55]">DisplayTaskEventLoop</a> from display_task.o(.text) referenced from osal_task.o(.constdata)
 <LI><a href="#[28]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[18]">GPIO_ReadSinglePin</a> from bsp.o(.text) referenced 14 times from osal_detect.o(.data)
 <LI><a href="#[29]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 107 times from startup_rvmdk.o(RESET)
 <LI><a href="#[33]">MSCCallback</a> from usb_stick_update.o(.text) referenced from usb_stick_update.o(.text)
 <LI><a href="#[54]">MdcEventLoop</a> from mdc_task.o(.text) referenced from osal_task.o(.constdata)
 <LI><a href="#[58]">NADUartTaskEventLoop</a> from nad_uart_app_task.o(.text) referenced from osal_task.o(.constdata)
 <LI><a href="#[27]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[26]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[56]">SysEventLoop</a> from system_task.o(.text) referenced from osal_task.o(.constdata)
 <LI><a href="#[2a]">SysTickIntHandler</a> from osal_task.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2d]">Timer1IntHandler</a> from bsp.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[59]">TimerOutEventLoop</a> from soft_timer_task.o(.text) referenced from osal_task.o(.constdata)
 <LI><a href="#[2e]">USB0HostIntHandler</a> from usbhostenum.o(i.USB0HostIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5c]">USBHMSCClose</a> from usbhmsc.o(i.USBHMSCClose) referenced from usbhmsc.o(.constdata)
 <LI><a href="#[5b]">USBHMSCOpen</a> from usbhmsc.o(i.USBHMSCOpen) referenced from usbhmsc.o(.constdata)
 <LI><a href="#[5a]">UpgradeEventLoop</a> from usb_stick_update.o(.text) referenced from osal_task.o(.constdata)
 <LI><a href="#[3a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[37]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[36]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[38]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[35]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[34]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
 <LI><a href="#[73]">audio</a> from src4382.o(.text) referenced from src4382.o(INIT_CMD)
 <LI><a href="#[6c]">bt_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[71]">dis</a> from display_task.o(.text) referenced from display_task.o(INIT_CMD)
 <LI><a href="#[76]">eep_read</a> from eprom_driver.o(.text) referenced from eprom_driver.o(INIT_CMD)
 <LI><a href="#[75]">eep_write</a> from eprom_driver.o(.text) referenced from eprom_driver.o(INIT_CMD)
 <LI><a href="#[32]">encode_interrupt_handler</a> from ui.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">epprom_scl</a> from eprom_driver.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[e]">epprom_sda</a> from eprom_driver.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[10]">epprom_sda_in</a> from eprom_driver.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[6e]">factory_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[6d]">file_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[5d]">fn1</a> from osal_console.o(.text) referenced from osal_console.o(INIT_CMD)
 <LI><a href="#[5e]">fn2</a> from osal_console.o(.text) referenced from osal_console.o(INIT_CMD)
 <LI><a href="#[5f]">fn3</a> from osal_console.o(.text) referenced from osal_console.o(INIT_CMD)
 <LI><a href="#[60]">fn4</a> from osal_console.o(.text) referenced from osal_console.o(INIT_CMD)
 <LI><a href="#[61]">fn5</a> from osal_console.o(.text) referenced from osal_console.o(INIT_CMD)
 <LI><a href="#[69]">hc595_init_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[68]">hc595_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[49]">iDMAUSBArbSizeSet</a> from usbdma.o(i.iDMAUSBArbSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[4a]">iDMAUSBChannelAllocate</a> from usbdma.o(i.iDMAUSBChannelAllocate) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[52]">iDMAUSBChannelDisable</a> from usbdma.o(i.iDMAUSBChannelDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[51]">iDMAUSBChannelEnable</a> from usbdma.o(i.iDMAUSBChannelEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[4e]">iDMAUSBChannelIntDisable</a> from usbdma.o(i.iDMAUSBChannelIntDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[4d]">iDMAUSBChannelIntEnable</a> from usbdma.o(i.iDMAUSBChannelIntEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[50]">iDMAUSBChannelRelease</a> from usbdma.o(i.iDMAUSBChannelRelease) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[4b]">iDMAUSBChannelStatus</a> from usbdma.o(i.iDMAUSBChannelStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[4c]">iDMAUSBIntStatus</a> from usbdma.o(i.iDMAUSBIntStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[4f]">iDMAUSBTransfer</a> from usbdma.o(i.iDMAUSBTransfer) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[53]">iDMAUSBUnitSizeSet</a> from usbdma.o(i.iDMAUSBUnitSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[2b]">ir_front_recive_handler</a> from ir_driver.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2f]">ir_in_recive_handler</a> from ir_driver.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[39]">isspace</a> from isspace.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[17]">key_read</a> from osal_key.o(.text) referenced 16 times from osal_key.o(.data)
 <LI><a href="#[66]">lcd_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[12]">mdc_slot1_scl</a> from mdc.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[11]">mdc_slot1_sda</a> from mdc.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[13]">mdc_slot1_sda_in</a> from mdc.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[15]">mdc_slot2_scl</a> from mdc.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[14]">mdc_slot2_sda</a> from mdc.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[16]">mdc_slot2_sda_in</a> from mdc.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[6b]">mdc_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[9]">pcm1795_scl</a> from pcm1795.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[8]">pcm1795_sda</a> from pcm1795.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[a]">pcm1795_sda_in</a> from pcm1795.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[72]">pcm_test</a> from pcm1795.o(.text) referenced from pcm1795.o(INIT_CMD)
 <LI><a href="#[67]">pin_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[6f]">pop_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[65]">power_on</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[62]">print_src</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[23]">src4382_audio_detect</a> from src4382.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[c]">src4382_scl</a> from src4382.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[b]">src4382_sda</a> from src4382.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[d]">src4382_sda_in</a> from src4382.o(.text) referenced 2 times from osal_soft_iic.o(.data)
 <LI><a href="#[74]">src4382_test</a> from src4382.o(.text) referenced from src4382.o(INIT_CMD)
 <LI><a href="#[63]">src_next</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[64]">src_prev</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[6a]">srcrst_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
 <LI><a href="#[22]">sys_audio_invalid_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[21]">sys_audio_valid_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[25]">sys_digital_audio_invalid_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[24]">sys_digital_audio_valid_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[1d]">sys_hp_plug_in_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[1e]">sys_hp_plug_out_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[20]">sys_protection_invalid_handler</a> from system_task.o(.text) referenced 6 times from osal_detect.o(.data)
 <LI><a href="#[1f]">sys_protection_valid_handler</a> from system_task.o(.text) referenced 6 times from osal_detect.o(.data)
 <LI><a href="#[1c]">sys_trigger_invalid_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[19]">sys_trigger_plug_in_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[1a]">sys_trigger_plug_out_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[1b]">sys_trigger_valid_handler</a> from system_task.o(.text) referenced 2 times from osal_detect.o(.data)
 <LI><a href="#[3b]">uDMAUSBArbSizeSet</a> from usbdma.o(i.uDMAUSBArbSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[3c]">uDMAUSBChannelAllocate</a> from usbdma.o(i.uDMAUSBChannelAllocate) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[3d]">uDMAUSBChannelDisable</a> from usbdma.o(i.uDMAUSBChannelDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[3e]">uDMAUSBChannelEnable</a> from usbdma.o(i.uDMAUSBChannelEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[40]">uDMAUSBChannelIntDisable</a> from usbdma.o(i.uDMAUSBChannelIntDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[3f]">uDMAUSBChannelIntEnable</a> from usbdma.o(i.uDMAUSBChannelIntEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[41]">uDMAUSBChannelRelease</a> from usbdma.o(i.uDMAUSBChannelRelease) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[42]">uDMAUSBChannelStatus</a> from usbdma.o(i.uDMAUSBChannelStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[44]">uDMAUSBIntStatus</a> from usbdma.o(i.uDMAUSBIntStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[47]">uDMAUSBTransfer</a> from usbdma.o(i.uDMAUSBTransfer) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[48]">uDMAUSBUnitSizeSet</a> from usbdma.o(i.uDMAUSBUnitSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[2c]">uart0_interrupt_handler</a> from serial.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[30]">uart3_interrupt_handler</a> from serial.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[31]">uart6_interrupt_handler</a> from serial.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[70]">upgrade_test</a> from system_task.o(.text) referenced from system_task.o(INIT_CMD)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[78]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[38b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[38c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[38d]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[38e]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[38f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7b]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[2c5]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7d]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[7f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[81]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[82]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[390]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[391]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[83]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[85]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[87]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[89]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[8b]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[8d]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[8e]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[8f]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[91]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[392]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[93]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[95]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[97]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[99]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[393]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a7]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[9d]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[394]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[395]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[396]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[397]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[398]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[399]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[39a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[39b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[39c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[39d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[39e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[39f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3a0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[3a1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3a2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[3a3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3a4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[3a5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3a6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3a7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[3a8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3a9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3aa]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[3ab]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[3ac]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[79]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3ad]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a4]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a6]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3ae]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a8]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; osal_init_system &rArr; mdc_init &rArr; mdc_adc_load &rArr; bsp_adc0_load &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3af]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[300]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ab]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3b0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ad]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[af]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeWrite
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeRead
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[30b]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[3b1]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[30c]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[31c]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDeepSleep
</UL>

<P><STRONG><a name="[3b2]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b3]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[2fc]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[b0]"></a>GPIOPinInputPu</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIOPinInputPu &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
</UL>

<P><STRONG><a name="[b2]"></a>bsp_gpio_init</STRONG> (Thumb, 942 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsp_gpio_init &rArr; GPIOPinInputPu &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinInputPu
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[b9]"></a>bsp_bt_uart_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_bt_uart_init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[bf]"></a>bsp_nad_app_uart_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_nad_app_uart_init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[c0]"></a>bsp_adc_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_adc_init &rArr; GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDisable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCHardwareOversampleConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[c8]"></a>bsp_timer0_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_timer0_init &rArr; TimerConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[cc]"></a>bsp_timer0_get_time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_timer0_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_in_recive_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_front_recive_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_interrupt_handler
</UL>

<P><STRONG><a name="[ce]"></a>bsp_timer1_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_timer1_init &rArr; TimerConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[2d]"></a>Timer1IntHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = Timer1IntHandler &rArr; KeyScanLoop &rArr; Send_SysTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_timeout_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>bsp_pwm1_init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodGet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClockSet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>

<P><STRONG><a name="[dc]"></a>bsp_lcd_bright_control</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodGet
</UL>

<P><STRONG><a name="[dd]"></a>bsp_spi0_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsp_spi0_init &rArr; GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[e1]"></a>bsp_spi0_ctl</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_spi0_ctl &rArr; SSIConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak4118_on_test_card_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_version_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_input_select
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Update
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_write
</UL>

<P><STRONG><a name="[e3]"></a>bsp_spi_operate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_write
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_read
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_try_write
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Update
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_write
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_write
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_read
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_read
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_read
</UL>

<P><STRONG><a name="[e5]"></a>bsp_delay_us</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_write
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_check_busy
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_dio_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_sample_set
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_write
</UL>

<P><STRONG><a name="[e6]"></a>bsp_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_delay_ms &rArr; bsp_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak4118_on_test_card_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_input_select
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_set_power
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_test
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srcrst_test
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_line_out_mode_select
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_output_mode_select
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_begin
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mdc_firmware_upgrade_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_off
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_on
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_erase_flash
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdaterUSB
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_bl_get_msg
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_trimLevel_set
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_sample_set
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_getMsg
</UL>

<P><STRONG><a name="[e7]"></a>bsp_adc0_load</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = bsp_adc0_load &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_adc_load
</UL>

<P><STRONG><a name="[294]"></a>bsp_get_elapsedMs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_service
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
</UL>

<P><STRONG><a name="[2a1]"></a>bsp_get_curMs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_service
</UL>

<P><STRONG><a name="[18]"></a>GPIO_ReadSinglePin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trigger_valid_handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trigger_invalid_handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_sda_in
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_sda_in
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot2_sda_in
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot1_sda_in
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epprom_sda_in
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NADUartTaskEventLoop
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_gpio_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_check_busy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_end
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_stanby_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_key_msg_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_off_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_on_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_check
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_protection_infor
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_standby_poll
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_in_polarity_check_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>bsp_low_power_handler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDeepSleep
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[ef]"></a>osal_set_event</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_set_event &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
</UL>

<P><STRONG><a name="[f2]"></a>osal_clear_event</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_clear_event &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
</UL>

<P><STRONG><a name="[f3]"></a>osal_msg_enqueue</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_msg_enqueue &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
</UL>

<P><STRONG><a name="[f4]"></a>osal_msg_dequeue</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, osal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[f5]"></a>osal_msg_allocate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osal_msg_allocate &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SysTask_Msg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_MdcTask_Msg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Soft_Task_Msg
</UL>

<P><STRONG><a name="[f7]"></a>osal_msg_deallocate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_msg_deallocate &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOutEventLoop
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NADUartTaskEventLoop
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdcEventLoop
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskEventLoop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtTaskEventLoop
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
</UL>

<P><STRONG><a name="[f9]"></a>osal_msg_extract</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_msg_extract &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
</UL>

<P><STRONG><a name="[fa]"></a>osal_msg_send</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osal_msg_send &rArr; osal_msg_deallocate &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_enqueue
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SysTask_Msg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_MdcTask_Msg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Soft_Task_Msg
</UL>

<P><STRONG><a name="[fb]"></a>osal_msg_receive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osal_msg_receive &rArr; osal_msg_extract &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_extract
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOutEventLoop
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NADUartTaskEventLoop
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdcEventLoop
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskEventLoop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtTaskEventLoop
</UL>

<P><STRONG><a name="[106]"></a>osal_env_save</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = osal_env_save &rArr; calc_env_crc &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nv_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_env_crc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_uesd_size
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_sys_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn5
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_default_env
</UL>

<P><STRONG><a name="[112]"></a>osal_env_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = osal_env_set &rArr; delete_then_append_env &rArr; append_env &rArr; get_env_uesd_size &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn3
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_default_env
</UL>

<P><STRONG><a name="[113]"></a>osal_set_default_env</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, osal_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env_end_addr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_start_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
</UL>

<P><STRONG><a name="[116]"></a>osal_env_init</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, osal_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_nv_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[118]"></a>osal_env_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = osal_env_get &rArr; find_env &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn4
</UL>

<P><STRONG><a name="[11a]"></a>osal_print_env</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = osal_print_env &rArr; print_env_data_section &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_env_data_section
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_sys_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn2
</UL>

<P><STRONG><a name="[117]"></a>osal_nv_init</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, osal_port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_init
</UL>

<P><STRONG><a name="[e4]"></a>s_printf</STRONG> (Thumb, 106 bytes, Stack size 544 bytes, osal_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_poll_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_version
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trigger_valid_handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trigger_plug_out_handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trigger_plug_in_handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trigger_invalid_handler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_protection_valid_handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_protection_invalid_handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hp_plug_out_handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hp_plug_in_handler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_digital_audio_valid_handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_digital_audio_invalid_handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_audio_valid_handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_audio_invalid_handler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_detect_state
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_detect_state
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_peek_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_len
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_ring_buffer_empty
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_buf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_byte_out
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_command
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn4
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn3
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_line
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBuf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_load_cur
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_get_commond
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SysTask_Msg
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nv_write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nv_read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_print_env
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_get
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_default_env
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_env_data_section
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_env_crc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_crc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env_crc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_end_addr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env_end_addr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc0_load
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_prepare_test_environment
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_adc_load
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_setup_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_test
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIT_setDiv
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIT_input_select
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_setDiv
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_blu_task
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_volume_event_handler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_volume_report
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_poll_handler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_list_add_next
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_blu_status_menu_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_input_select
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_Mute_Control
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_input_select
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_input_select
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_dio_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_version_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_version_get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_set_power
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_MdcTask_Msg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_test
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_test
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_test
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_test
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srcrst_test
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_init_test
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_test
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_prev
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_next
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_src
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_name_record
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_list_append
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_balance_msg_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_auto_standby_msg_handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_list_add_next
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_list_update_handler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_stanby_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_send_bluos_response_msg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_config_menu_next
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_config_menu_prev
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bt_play_pause
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_constant_input_select
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_input_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_check
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_off
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_save
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_scroll
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Soft_Task_Msg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_check_flash_status
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_block
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_finish_program
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_erase_flash
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdaterUSB
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hex_decode_and_upgrade
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_block_address
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_msg_handler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_set_run_app
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_bl_get_msg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_try_write
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_volume_set
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_service
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_resume_power
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_read
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task2
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_select_source
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_get_version
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_getMsg
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_read
</UL>

<P><STRONG><a name="[115]"></a>nv_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, osal_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
</UL>

<P><STRONG><a name="[108]"></a>nv_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, osal_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = nv_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_save
</UL>

<P><STRONG><a name="[11e]"></a>osalInitTasks</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, osal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osalInitTasks &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTaskInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOutEventInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTaskInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NADUartTaskEventInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdcTaskInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtTaskEventInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[126]"></a>osal_init_system</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, osal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = osal_init_system &rArr; mdc_init &rArr; mdc_adc_load &rArr; bsp_adc0_load &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_load_cur
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_list_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_list_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>osal_start_system</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, osal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = osal_start_system &rArr; ir_get_commond &rArr; ring_buffer_len &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_get_commond
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SysTask_Msg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGpioPoll
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b5]"></a>Delay_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, osal_task.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>SysTickIntHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, osal_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTickIntHandler &rArr; osalTimerUpdate &rArr; osal_set_event &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>Register_Bitmap_Flag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, osal_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_speaker_mode_select_menu_handler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_auto_standby_menu_handler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_ir_channel_select_menu_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_line_out_select_menu
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_output_select_menu
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_not_insert_menu_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_play_menu_handler
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_file_list_menu_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_source_menu_handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_running_parameter_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_standby_poll
</UL>

<P><STRONG><a name="[1a4]"></a>Deregister_Bitmap_Flag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, osal_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_dis_timeout_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_play_menu_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_seek
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_stanby_onoff_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_standby_poll
</UL>

<P><STRONG><a name="[18b]"></a>IS_Flag_Valid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, osal_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskEventLoop
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_play_menu_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_standby_poll
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_scroll_handler
</UL>

<P><STRONG><a name="[134]"></a>osalFindTimer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, osal_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalAddTimer
</UL>

<P><STRONG><a name="[133]"></a>osalAddTimer</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, osal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osalAddTimer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalFindTimer
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
</UL>

<P><STRONG><a name="[138]"></a>osalDeleteTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osal_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_all_timerEx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
</UL>

<P><STRONG><a name="[135]"></a>osal_start_timerEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, osal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osal_start_timerEx &rArr; osalAddTimer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalAddTimer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_in_recive_handler
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_process_handler
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_for_restart_confirm_handler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_for_start_confirm_handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_handler
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_test_report
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_poll_handler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_start_scroll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_source_menu_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_test
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_line_out_mode_select
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_output_mode_select
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_begin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_b_msg_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_a_msg_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_treble_msg_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bass_msg_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_balance_msg_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_msg_handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_list_update_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_show_config_menu_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mdc_firmware_upgrade_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_next
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_config_menu_next
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_config_menu_prev
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_select_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_check
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_standby_poll
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_in_polarity_check_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_scroll_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdaterUSB
</UL>

<P><STRONG><a name="[136]"></a>osal_start_reload_timer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, osal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osal_start_reload_timer &rArr; osalAddTimer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalAddTimer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
</UL>

<P><STRONG><a name="[137]"></a>osal_stop_timerEx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, osal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_stop_timerEx &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalDeleteTimer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalFindTimer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_stanby_onoff_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_standby_poll
</UL>

<P><STRONG><a name="[139]"></a>osal_stop_all_timerEx</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, osal_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalDeleteTimer
</UL>

<P><STRONG><a name="[132]"></a>osalTimerUpdate</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, osal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osalTimerUpdate &rArr; osal_set_event &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[104]"></a>calc_crc32</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, osal_utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_env_crc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_save
</UL>

<P><STRONG><a name="[3b6]"></a>Utf2Unicode</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, osal_utility.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>DumpBuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, osal_utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>

<P><STRONG><a name="[3b7]"></a>GetWeekdayType</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, osal_utility.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>fn1</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, osal_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = fn1 &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_console.o(INIT_CMD)
</UL>
<P><STRONG><a name="[5e]"></a>fn2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, osal_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = fn2 &rArr; osal_print_env &rArr; print_env_data_section &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_print_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_console.o(INIT_CMD)
</UL>
<P><STRONG><a name="[5f]"></a>fn3</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, osal_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = fn3 &rArr; osal_env_set &rArr; delete_then_append_env &rArr; append_env &rArr; get_env_uesd_size &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_console.o(INIT_CMD)
</UL>
<P><STRONG><a name="[60]"></a>fn4</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, osal_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = fn4 &rArr; osal_env_get &rArr; find_env &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_console.o(INIT_CMD)
</UL>
<P><STRONG><a name="[61]"></a>fn5</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, osal_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = fn5 &rArr; osal_env_save &rArr; calc_env_crc &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_console.o(INIT_CMD)
</UL>
<P><STRONG><a name="[13b]"></a>Init_all</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, osal_console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[140]"></a>osal_run_command</STRONG> (Thumb, 44 bytes, Stack size 88 bytes, osal_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = osal_run_command &rArr; cmd_process &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_line
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_poll_handler
</UL>

<P><STRONG><a name="[14a]"></a>osal_iic_write_buf</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_byte_out
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>

<P><STRONG><a name="[14b]"></a>osal_iic_write_byte</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIT_setDiv
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIT_input_select
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_setDiv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_SRC_refrence_change
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_refrence_change
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIR_input_select
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_setpin
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_SRC_input_select
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_input_select
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_Mute_Control
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_init
</UL>

<P><STRONG><a name="[14c]"></a>osal_iic_read_buf</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_buf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_byte_out
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_byte_in
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_audio_detect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_test
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIT_setDiv
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIT_input_select
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_setDiv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_SRC_refrence_change
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_refrence_change
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_input_select
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_Mute_Control
</UL>

<P><STRONG><a name="[14d]"></a>osal_key_is_down</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, osal_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_key_is_down &rArr; ui_key_read
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_key_long_down_handler
</UL>

<P><STRONG><a name="[d1]"></a>KeyScanLoop</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, osal_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = KeyScanLoop &rArr; Send_SysTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SysTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
</UL>

<P><STRONG><a name="[129]"></a>ring_buffer_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, osal_ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ring_buffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[14f]"></a>ring_buffer_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, osal_ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_interrupt_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_interrupt_handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_in_recive_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_front_recive_handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_read
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_read
</UL>

<P><STRONG><a name="[150]"></a>ring_buffer_read</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, osal_ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ring_buffer_read &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_poll_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_get_commond
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_uart_poll_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_poll_handler
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_get_byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_getc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_getc
</UL>

<P><STRONG><a name="[151]"></a>Is_ring_buffer_empty</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, osal_ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = Is_ring_buffer_empty &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_get_byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_getc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_getc
</UL>

<P><STRONG><a name="[152]"></a>ring_buffer_len</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, osal_ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ring_buffer_len &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_poll_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_peek_read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_get_commond
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_uart_poll_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_poll_handler
</UL>

<P><STRONG><a name="[153]"></a>ring_buffer_peek_read</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, osal_ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ring_buffer_peek_read &rArr; ring_buffer_len &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_len
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_poll_handler
</UL>

<P><STRONG><a name="[154]"></a>update_detect_state</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osal_detect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = update_detect_state &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trigger_plug_in_handler
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protection_later_handler
</UL>

<P><STRONG><a name="[1cd]"></a>update_all_protect_state</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, osal_detect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>

<P><STRONG><a name="[155]"></a>set_detect_state</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, osal_detect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>

<P><STRONG><a name="[131]"></a>DetectGpioPoll</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, osal_detect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DetectGpioPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
</UL>

<P><STRONG><a name="[a9]"></a>main</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = main &rArr; osal_init_system &rArr; mdc_init &rArr; mdc_adc_load &rArr; bsp_adc0_load &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_version
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15c]"></a>uart_hal_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart_hal_init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[2c]"></a>uart0_interrupt_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = uart0_interrupt_handler &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>uart6_interrupt_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = uart6_interrupt_handler &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>uart3_interrupt_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = uart3_interrupt_handler &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[163]"></a>serial_poll_handler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = serial_poll_handler &rArr; osal_run_command &rArr; cmd_process &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_printf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_len
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_command
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOutEventLoop
</UL>

<P><STRONG><a name="[164]"></a>ui_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>

<P><STRONG><a name="[14e]"></a>ui_key_read</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_key_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_key_is_down
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_read
</UL>

<P><STRONG><a name="[32]"></a>encode_interrupt_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = encode_interrupt_handler &rArr; Send_SysTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SysTask_Msg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer0_get_time
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>ui_led_control</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_led_control
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_protection_valid_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
</UL>

<P><STRONG><a name="[169]"></a>SimpleFsReadMediaSector</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SimpleFsReadMediaSector &rArr; USBHMSCBlockRead &rArr; USBHSCSIRead10 &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCBlockRead
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsGetNextCluster
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsOpen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsGetNextFileSector
</UL>

<P><STRONG><a name="[16e]"></a>USB_ProgramHexRecord</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = USB_ProgramHexRecord &rArr; usb_send_block &rArr; mdc_usb_send_block &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_block_address
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_send_block
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hex_decode_and_upgrade
</UL>

<P><STRONG><a name="[170]"></a>AsciiToHexNibble</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, usb_stick_update.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hex_decode_and_upgrade
</UL>

<P><STRONG><a name="[171]"></a>ReadAppAndProgram</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = ReadAppAndProgram &rArr; do_hex_decode_and_upgrade &rArr; USB_ProgramHexRecord &rArr; usb_send_block &rArr; mdc_usb_send_block &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_check_flash_status
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_finish_program
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_erase_flash
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_simple_print
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCDriveReady
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsOpen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsGetNextFileSector
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hex_decode_and_upgrade
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_send_block
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdaterUSB
</UL>

<P><STRONG><a name="[17a]"></a>UpdaterUSB</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = UpdaterUSB &rArr; ReadAppAndProgram &rArr; do_hex_decode_and_upgrade &rArr; USB_ProgramHexRecord &rArr; usb_send_block &rArr; mdc_usb_send_block &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_simple_print
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDMain
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeEventLoop
</UL>

<P><STRONG><a name="[17c]"></a>ConfigureUSBInterface</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ConfigureUSBInterface &rArr; USBHCDInit &rArr; USBHCDInitInternal &rArr; USBHCDPowerConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAEnable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAControlBaseSet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBStackModeSet
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCDriveOpen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDRegisterDrivers
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPowerConfigInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBDigital
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_test
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mdc_firmware_upgrade_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdaterMain
</UL>

<P><STRONG><a name="[186]"></a>UpdaterMain</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_stick_update.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPULazyStackingEnable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[125]"></a>UpgradeTaskInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_stick_update.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[5a]"></a>UpgradeEventLoop</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = UpgradeEventLoop &rArr; UpdaterUSB &rArr; ReadAppAndProgram &rArr; do_hex_decode_and_upgrade &rArr; USB_ProgramHexRecord &rArr; usb_send_block &rArr; mdc_usb_send_block &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdaterUSB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>SimpleFsInit</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, simple_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SimpleFsInit &rArr; SimpleFsReadMediaSector &rArr; USBHMSCBlockRead &rArr; USBHSCSIRead10 &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsReadMediaSector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>

<P><STRONG><a name="[179]"></a>SimpleFsGetNextFileSector</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, simple_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SimpleFsGetNextFileSector &rArr; SimpleFsGetNextCluster &rArr; SimpleFsReadMediaSector &rArr; USBHMSCBlockRead &rArr; USBHSCSIRead10 &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsGetNextCluster
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsReadMediaSector
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsOpen
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>

<P><STRONG><a name="[174]"></a>SimpleFsOpen</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, simple_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SimpleFsOpen &rArr; SimpleFsGetNextFileSector &rArr; SimpleFsGetNextCluster &rArr; SimpleFsReadMediaSector &rArr; USBHMSCBlockRead &rArr; USBHSCSIRead10 &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsGetNextFileSector
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsReadMediaSector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>

<P><STRONG><a name="[124]"></a>TimerOutEventInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soft_timer_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[59]"></a>TimerOutEventLoop</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, soft_timer_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = TimerOutEventLoop &rArr; mdc_test_task_handler &rArr; test_process_handler &rArr; do_mdc_test &rArr; do_i2c_test &rArr; eeprom_read &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_poll_handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_standby_poll
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test_task_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_in_polarity_check_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_scroll_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>Send_Soft_Task_Msg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, soft_timer_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = Send_Soft_Task_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_digital_audio_valid_handler
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_uart_poll_handler
</UL>

<P><STRONG><a name="[121]"></a>SysTaskInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[127]"></a>sys_database_init</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = sys_database_init &rArr; sys_nv_set_default &rArr; sys_database_save &rArr; eeprom_write &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_running_parameter_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nv_set_default
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[18f]"></a>sys_auto_standby_poll</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_auto_standby_poll &rArr; osal_start_timerEx &rArr; osalAddTimer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_Flag_Valid
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOutEventLoop
</UL>

<P><STRONG><a name="[1b1]"></a>sys_master_vol_set</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_master_vol_set &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_volume_r_set
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_volume_l_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_end
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_balance_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_check
</UL>

<P><STRONG><a name="[1b9]"></a>sys_update_all_src_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
</UL>

<P><STRONG><a name="[1ba]"></a>do_main_msg_handler</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = do_main_msg_handler &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>

<P><STRONG><a name="[1c4]"></a>sys_get_src_state</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_get_src_state &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_constant_input_select
</UL>

<P><STRONG><a name="[1ca]"></a>sys_input_select</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = sys_input_select &rArr; sys_constant_input_select &rArr; src4382_SRC_input_select &rArr; src4382_PortA_input_select &rArr; src4382_setpin &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_SRC_input_select
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_input_select
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_Mute_Control
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_input_select
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_constant_input_select
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_msg_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_select_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>

<P><STRONG><a name="[1ce]"></a>fix_pop_begin</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = fix_pop_begin &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_mute
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
</UL>

<P><STRONG><a name="[1d2]"></a>sys_src_next_handler</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = sys_src_next_handler &rArr; fix_pop_begin &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_begin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bt_play_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_msg_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
</UL>

<P><STRONG><a name="[1d3]"></a>sys_src_prev_handler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = sys_src_prev_handler &rArr; fix_pop_begin &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_begin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bt_play_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_msg_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
</UL>

<P><STRONG><a name="[1de]"></a>sys_output_mode_select</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_output_mode_select &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_output_select_menu
</UL>

<P><STRONG><a name="[1df]"></a>sys_line_out_mode_select</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_line_out_mode_select &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_line_out_select_menu
</UL>

<P><STRONG><a name="[12c]"></a>sys_src_load_cur</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = sys_src_load_cur &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
</UL>

<P><STRONG><a name="[1e8]"></a>sys_src_list_detach</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_src_list_detach &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
</UL>

<P><STRONG><a name="[1e9]"></a>sys_factory_reset</STRONG> (Thumb, 516 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = sys_factory_reset &rArr; display_factory_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_load_cur
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_power_set
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_menu
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_clear_all_paring_list
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_list_detach
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_all_src_state
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delect_file_list
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_output_control
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_running_parameter_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nv_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_msg_handler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_key_long_down_handler
</UL>

<P><STRONG><a name="[56]"></a>SysEventLoop</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = SysEventLoop &rArr; sys_ir_command_handler &rArr; sys_down_key_handler &rArr; sys_usb_file_next &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_reading_timeout_handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_list_update_handler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_stanby_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_send_bluos_response_msg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_key_msg_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_check
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>Send_SysTask_Msg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = Send_SysTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanLoop
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_interrupt_handler
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_mute_cmd_handler
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_volume_cmd_handler
</UL>

<P><STRONG><a name="[203]"></a>fix_pop_end</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = fix_pop_end &rArr; sys_master_vol_set &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NADUartTaskEventLoop
</UL>

<P><STRONG><a name="[128]"></a>sys_src_list_create</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = sys_src_list_create &rArr; src_list_add_next &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_list_add_next
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[205]"></a>sys_src_list_append</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = sys_src_list_append &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
</UL>

<P><STRONG><a name="[206]"></a>sys_cur_src_state_update</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sys_cur_src_state_update &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_control
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
</UL>

<P><STRONG><a name="[210]"></a>sys_update_src_state</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_digital_audio_valid_handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_digital_audio_invalid_handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_audio_valid_handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_audio_invalid_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bt_msg_handler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
</UL>

<P><STRONG><a name="[207]"></a>sys_update_src_state_by_name</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_update_src_state_by_name &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_usb_plug_out_hanlder
</UL>

<P><STRONG><a name="[208]"></a>sys_usb_file_name_record</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = sys_usb_file_name_record &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
</UL>

<P><STRONG><a name="[20f]"></a>sys_file_list_load_cur</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
</UL>

<P><STRONG><a name="[214]"></a>sys_mdc_usb_msg_handler</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = sys_mdc_usb_msg_handler &rArr; do_file_seek &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_usb_plug_out_hanlder
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_control
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_time_update
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_seek
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delect_file_list
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task2
</UL>

<P><STRONG><a name="[219]"></a>sys_mdc_blu_msg_handler</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = sys_mdc_blu_msg_handler &rArr; do_blu_volume_reply &rArr; blu_send_msg &rArr; blu_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_status_update
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_mute_reply
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_control
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_time_update
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_blu_task
</UL>

<P><STRONG><a name="[22e]"></a>sys_nad_uart_msg_handler</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = sys_nad_uart_msg_handler &rArr; do_power_msg_handler &rArr; sys_power_on_handler &rArr; lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_main_msg_handler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cmd_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_line
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tone_defeat_msg_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_b_msg_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_a_msg_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_treble_msg_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bass_msg_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_balance_msg_handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_msg_handler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_volume_msg_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_version_msg_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_num_msg_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_msg_handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_msg_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mute_mag_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_model_msg_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ir_channel_msg_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_auto_standby_msg_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_uart_poll_handler
</UL>

<P><STRONG><a name="[21]"></a>sys_audio_valid_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = sys_audio_valid_handler &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_src_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>sys_audio_invalid_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = sys_audio_invalid_handler &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_src_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>sys_trigger_plug_in_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = sys_trigger_plug_in_handler &rArr; update_detect_state &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_detect_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>sys_trigger_plug_out_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = sys_trigger_plug_out_handler &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>sys_protection_valid_handler</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_protection_valid_handler &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>sys_protection_invalid_handler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_protection_invalid_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>sys_trigger_valid_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = sys_trigger_valid_handler &rArr; sys_power_on_handler &rArr; lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>sys_trigger_invalid_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = sys_trigger_invalid_handler &rArr; sys_power_off_handler &rArr; sys_hw_power_off &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>sys_digital_audio_valid_handler</STRONG> (Thumb, 570 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_digital_audio_valid_handler &rArr; Send_Soft_Task_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_src_state
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Soft_Task_Msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>sys_digital_audio_invalid_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = sys_digital_audio_invalid_handler &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_src_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>sys_hp_plug_in_handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_hp_plug_in_handler &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>sys_hp_plug_out_handler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_hp_plug_out_handler &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>print_src</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = print_src &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[63]"></a>src_next</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = src_next &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[64]"></a>src_prev</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = src_prev &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[65]"></a>power_on</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = power_on &rArr; sys_power_on_handler &rArr; lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[66]"></a>lcd_test</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = lcd_test &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[67]"></a>pin_test</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_test
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[68]"></a>hc595_test</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = hc595_test &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[69]"></a>hc595_init_test</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = hc595_init_test &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[6a]"></a>srcrst_test</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = srcrst_test &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[6b]"></a>mdc_test</STRONG> (Thumb, 58 bytes, Stack size 80 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = mdc_test &rArr; sys_music_play_handler &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_music_play_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_music_pause_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[6c]"></a>bt_test</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = bt_test &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_send_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[6d]"></a>file_test</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = file_test &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[6e]"></a>factory_test</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = factory_test &rArr; sys_nv_set_default &rArr; sys_database_save &rArr; eeprom_write &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nv_set_default
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[6f]"></a>pop_test</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = pop_test &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[70]"></a>upgrade_test</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = upgrade_test &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_power_set
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[120]"></a>DisplayTaskInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[20d]"></a>dis_scroll_update</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dis_scroll_update &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
</UL>

<P><STRONG><a name="[23d]"></a>display_menu_state_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, display_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_play_menu_handler
</UL>

<P><STRONG><a name="[1af]"></a>Send_DisplayTask_Msg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_protection_valid_handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_protection_invalid_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bt_msg_handler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_menu_to_file_list_handler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_dis_timeout_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_dis_timeout_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_b_msg_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_a_msg_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_treble_msg_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bass_msg_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_balance_msg_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_msg_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ir_channel_msg_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_auto_standby_msg_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_status_update
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_usb_plug_out_hanlder
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_control
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_time_update
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_seek
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_reading_timeout_handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_list_update_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_show_config_menu_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_enter_key_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_next
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_up_key_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_config_menu_next
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_config_menu_prev
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_select_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_protection_infor
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
</UL>

<P><STRONG><a name="[1ae]"></a>display_menu_jump</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, display_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bt_msg_handler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_menu_to_file_list_handler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_dis_timeout_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_msg_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_status_update
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_usb_plug_out_hanlder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_seek
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_show_config_menu_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_enter_key_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_config_menu_next
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_select_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
</UL>

<P><STRONG><a name="[55]"></a>DisplayTaskEventLoop</STRONG> (Thumb, 488 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = DisplayTaskEventLoop &rArr; dispaly_update_handler &rArr; dis_blu_status_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_Flag_Valid
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_menu_to_file_list_handler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_dis_timeout_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_dis_timeout_handler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>dis_simple_print</STRONG> (Thumb, 172 bytes, Stack size 152 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = dis_simple_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mdc_firmware_upgrade_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdaterUSB
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>

<P><STRONG><a name="[18c]"></a>dis_print_scroll</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dis_print_scroll &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_scroll_handler
</UL>

<P><STRONG><a name="[232]"></a>display_init_menu</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
</UL>

<P><STRONG><a name="[1ea]"></a>display_factory_menu</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = display_factory_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
</UL>

<P><STRONG><a name="[12d]"></a>display_menu_list_create</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = display_menu_list_create &rArr; menu_list_add_next &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_list_add_next
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[71]"></a>dis</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = dis &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display_task.o(INIT_CMD)
</UL>
<P><STRONG><a name="[122]"></a>BtTaskEventInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[255]"></a>bt_poll_handler</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, bt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = bt_poll_handler &rArr; do_bt_msg_handler &rArr; src4382_PortB_Mute_Control &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_peek_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_len
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bt_msg_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtTaskEventLoop
</UL>

<P><STRONG><a name="[57]"></a>BtTaskEventLoop</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = BtTaskEventLoop &rArr; bt_poll_handler &rArr; do_bt_msg_handler &rArr; src4382_PortB_Mute_Control &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_poll_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>bt_send_byte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bt_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_clear_all_paring_list
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_test
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cmd_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bt_go_pairng
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bt_play_pause
</UL>

<P><STRONG><a name="[1eb]"></a>bt_clear_all_paring_list</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bt_clear_all_paring_list &rArr; bt_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
</UL>

<P><STRONG><a name="[11f]"></a>MdcTaskInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdc_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[1fc]"></a>Send_MdcTask_Msg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mdc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = Send_MdcTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdcEventLoop
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
</UL>

<P><STRONG><a name="[54]"></a>MdcEventLoop</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mdc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = MdcEventLoop &rArr; mdc_poll_handler &rArr; mdc_usb_task &rArr; sys_mdc_usb_msg_handler &rArr; do_file_seek &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_poll_handler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_volume_event_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_MdcTask_Msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>NADUartTaskEventInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nad_uart_app_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[25d]"></a>nad_send_byte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nad_uart_app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nad_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_uart_poll_handler
</UL>

<P><STRONG><a name="[1bb]"></a>nad_send_str</STRONG> (Thumb, 80 bytes, Stack size 544 bytes, nad_uart_app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_process_handler
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gpio_test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opt_test
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_usb_test
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_voltage_test
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_for_restart_confirm_handler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_for_start_confirm_handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_handler
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_test_report
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_uart_poll_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_main_msg_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_b_msg_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_a_msg_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_treble_msg_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bass_msg_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_balance_msg_handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_msg_handler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_volume_msg_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_version_msg_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_num_msg_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_msg_handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_msg_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mute_mag_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_model_msg_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ir_channel_msg_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_auto_standby_msg_handler
</UL>

<P><STRONG><a name="[58]"></a>NADUartTaskEventLoop</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, nad_uart_app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = NADUartTaskEventLoop &rArr; nad_uart_poll_handler &rArr; sys_nad_uart_msg_handler &rArr; do_power_msg_handler &rArr; sys_power_on_handler &rArr; lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protection_later_handler
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_uart_poll_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>pcm1795_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pcm1795.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = pcm1795_init &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm_test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_init
</UL>

<P><STRONG><a name="[8]"></a>pcm1795_sda</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pcm1795.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pcm1795_sda &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>pcm1795_scl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pcm1795.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pcm1795_scl &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>pcm1795_sda_in</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pcm1795.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pcm1795_sda_in
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>pcm_test</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pcm1795.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = pcm_test &rArr; pcm1795_init &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcm1795.o(INIT_CMD)
</UL>
<P><STRONG><a name="[1aa]"></a>src4382_init</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = src4382_init &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_init
</UL>

<P><STRONG><a name="[260]"></a>src4382_DIR_input_select</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = src4382_DIR_input_select &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIT_input_select
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_SRC_input_select
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_input_select
</UL>

<P><STRONG><a name="[262]"></a>src4382_PortA_input_select</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = src4382_PortA_input_select &rArr; src4382_setpin &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_setpin
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIT_input_select
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_SRC_input_select
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_input_select
</UL>

<P><STRONG><a name="[1c7]"></a>src4382_PortB_input_select</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = src4382_PortB_input_select &rArr; src4382_PortA_input_select &rArr; src4382_setpin &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortA_input_select
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIR_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_constant_input_select
</UL>

<P><STRONG><a name="[263]"></a>src4382_PortB_refrence_change</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, src4382.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
</UL>

<P><STRONG><a name="[264]"></a>src4382_SRC_refrence_change</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, src4382.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
</UL>

<P><STRONG><a name="[265]"></a>src4382_PortB_setDiv</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, src4382.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>

<P><STRONG><a name="[1c9]"></a>src4382_PortB_Mute_Control</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = src4382_PortB_Mute_Control &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bt_msg_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_constant_input_select
</UL>

<P><STRONG><a name="[266]"></a>src4382_DIT_input_select</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, src4382.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortA_input_select
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIR_input_select
</UL>

<P><STRONG><a name="[267]"></a>src4382_DIT_setDiv</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, src4382.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>

<P><STRONG><a name="[1c6]"></a>src4382_SRC_input_select</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = src4382_SRC_input_select &rArr; src4382_PortA_input_select &rArr; src4382_setpin &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortA_input_select
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_DIR_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_constant_input_select
</UL>

<P><STRONG><a name="[23]"></a>src4382_audio_detect</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = src4382_audio_detect &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opt_test
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_detect.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>src4382_sda</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = src4382_sda &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>src4382_scl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = src4382_scl &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>src4382_sda_in</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = src4382_sda_in
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>audio</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = audio &rArr; src4382_audio_detect &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_audio_detect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> src4382.o(INIT_CMD)
</UL>
<P><STRONG><a name="[74]"></a>src4382_test</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = src4382_test &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> src4382.o(INIT_CMD)
</UL>
<P><STRONG><a name="[1c8]"></a>njw1194_input_select</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, njw1194.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = njw1194_input_select &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_constant_input_select
</UL>

<P><STRONG><a name="[1a6]"></a>njw1194_treble_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, njw1194.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = njw1194_treble_set &rArr; njw1194_write &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_treble_vol_set
</UL>

<P><STRONG><a name="[1a8]"></a>njw1194_bass_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, njw1194.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = njw1194_bass_set &rArr; njw1194_write &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bass_vol_set
</UL>

<P><STRONG><a name="[26a]"></a>njw1194_volume_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, njw1194.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = njw1194_volume_set &rArr; njw1194_write &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_mute
</UL>

<P><STRONG><a name="[1b4]"></a>njw1194_volume_l_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, njw1194.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = njw1194_volume_l_set &rArr; njw1194_write &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
</UL>

<P><STRONG><a name="[1b5]"></a>njw1194_volume_r_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, njw1194.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = njw1194_volume_r_set &rArr; njw1194_write &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
</UL>

<P><STRONG><a name="[1cf]"></a>njw1194_mute</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, njw1194.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = njw1194_mute &rArr; njw1194_volume_set &rArr; njw1194_write &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_volume_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_begin
</UL>

<P><STRONG><a name="[2f]"></a>ir_in_recive_handler</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, ir_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ir_in_recive_handler &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer0_get_time
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ir_front_recive_handler</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, ir_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ir_front_recive_handler &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer0_get_time
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>ir_get_commond</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ir_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ir_get_commond &rArr; ring_buffer_len &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_len
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
</UL>

<P><STRONG><a name="[d2]"></a>ir_timeout_check</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ir_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
</UL>

<P><STRONG><a name="[e]"></a>epprom_sda</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eprom_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = epprom_sda &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>epprom_scl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eprom_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = epprom_scl &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>epprom_sda_in</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eprom_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = epprom_sda_in
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[192]"></a>eeprom_write</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, eprom_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = eeprom_write &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_buf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_i2c_test
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_save
</UL>

<P><STRONG><a name="[ed]"></a>eeprom_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, eprom_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = eeprom_read &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_low_power_handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_i2c_test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_read
</UL>

<P><STRONG><a name="[75]"></a>eep_write</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, eprom_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = eep_write &rArr; eeprom_write &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eprom_driver.o(INIT_CMD)
</UL>
<P><STRONG><a name="[76]"></a>eep_read</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, eprom_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = eep_read &rArr; eeprom_read &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eprom_driver.o(INIT_CMD)
</UL>
<P><STRONG><a name="[12a]"></a>hc595_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, 74hc595.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hc595_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_init_test
</UL>

<P><STRONG><a name="[197]"></a>hc595_write</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, 74hc595.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_protection_valid_handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hp_plug_out_handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hp_plug_in_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NADUartTaskEventLoop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_test
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_end
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_line_out_mode_select
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_output_mode_select
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_begin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_speaker_mode_select_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_output_control
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_off
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_on
</UL>

<P><STRONG><a name="[236]"></a>lcd_write_cmd</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lcd_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = lcd_write_cmd &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_check_busy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bus_write
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_arrow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_scroll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_simple_print
</UL>

<P><STRONG><a name="[237]"></a>lcd_write_data</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lcd_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_check_busy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bus_write
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_arrow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_scroll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_simple_print
</UL>

<P><STRONG><a name="[1cc]"></a>lcd_init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lcd_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>

<P><STRONG><a name="[19c]"></a>mdc_power_set</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mdc_power_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_test_report
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_prepare_test_environment
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_test
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mdc_firmware_upgrade_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_resume_power
</UL>

<P><STRONG><a name="[12b]"></a>mdc_init</STRONG> (Thumb, 940 bytes, Stack size 80 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = mdc_init &rArr; mdc_adc_load &rArr; bsp_adc0_load &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SysTask_Msg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_prepare_test_environment
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_adc_load
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_card_name_update
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_setup_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot_update
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_adc_cmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_list_append
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
</UL>

<P><STRONG><a name="[274]"></a>mdc_bus_select</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mdc_bus_select
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gpio_test
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak4118_on_test_card_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_blu_task
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_v2_send_msg
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_dio_input_select
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_dio_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_input_select
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_version_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_input_select
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_version_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_input_select
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_send_msg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_set_power
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_check_flash_status
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_block
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_finish_program
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_erase_flash
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_mode_set
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_trimLevel_set
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_sample_set
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_report_hid
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task2
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_select_source
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_get_version
</UL>

<P><STRONG><a name="[275]"></a>mdc_psX_set</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mdc_psX_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gpio_test
</UL>

<P><STRONG><a name="[276]"></a>mdc_gpio_set_dir</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mdc_gpio_set_dir &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gpio_test
</UL>

<P><STRONG><a name="[277]"></a>mdc_gpio_get</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mdc_gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gpio_test
</UL>

<P><STRONG><a name="[1c3]"></a>mdc_iis_select</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mdc_iis_select
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_input_select
</UL>

<P><STRONG><a name="[1c0]"></a>mdc_usb_bus_select</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mdc_usb_bus_select
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_input_select
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_input_select
</UL>

<P><STRONG><a name="[278]"></a>mdc_usb_disable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[279]"></a>mdc_pa_set</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mdc_pa_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gpio_test
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_volume_set
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_input_set
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task2
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
</UL>

<P><STRONG><a name="[27a]"></a>mdc_int_get</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mdc_int_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gpio_test
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_try_write
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
</UL>

<P><STRONG><a name="[18e]"></a>mdc_test_task_handler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = mdc_test_task_handler &rArr; test_process_handler &rArr; do_mdc_test &rArr; do_i2c_test &rArr; eeprom_read &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_process_handler
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_for_restart_confirm_handler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_for_start_confirm_handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOutEventLoop
</UL>

<P><STRONG><a name="[11]"></a>mdc_slot1_sda</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mdc_slot1_sda &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>mdc_slot1_scl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mdc_slot1_scl &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>mdc_slot1_sda_in</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mdc_slot1_sda_in
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>mdc_slot2_sda</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mdc_slot2_sda &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>mdc_slot2_scl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mdc_slot2_scl &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>mdc_slot2_sda_in</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mdc_slot2_sda_in
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_soft_iic.o(.data)
</UL>
<P><STRONG><a name="[28a]"></a>AK4118_read</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mdc_dio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = AK4118_read &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_write
</UL>

<P><STRONG><a name="[282]"></a>AK4118_write</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mdc_dio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = AK4118_write &rArr; AK4118_read &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_read
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak4118_on_test_card_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_input_select
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_dio_input_select
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_dio_init
</UL>

<P><STRONG><a name="[19e]"></a>mdc_dio_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, mdc_dio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = mdc_dio_init &rArr; AK4118_write &rArr; AK4118_read &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
</UL>

<P><STRONG><a name="[1bf]"></a>mdc_dio_input_select</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mdc_dio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = mdc_dio_input_select &rArr; AK4118_write &rArr; AK4118_read &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_input_select
</UL>

<P><STRONG><a name="[1db]"></a>mdc_usb_send_msg</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_read
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_spi
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_seek
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_music_play_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_music_pause_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_enter_key_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_next
</UL>

<P><STRONG><a name="[178]"></a>usb_bl_check_flash_status</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = usb_bl_check_flash_status &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_getMsg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_spi
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>

<P><STRONG><a name="[292]"></a>usb_bl_get_version</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = usb_bl_get_version &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_getMsg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_spi
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_init
</UL>

<P><STRONG><a name="[293]"></a>usb_bl_runApp</STRONG> (Thumb, 682 bytes, Stack size 64 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = usb_bl_runApp &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_elapsedMs
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_spi
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_init
</UL>

<P><STRONG><a name="[19d]"></a>mdc_usb_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = mdc_usb_init &rArr; usb_bl_runApp &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_check_flash_status
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_get_version
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
</UL>

<P><STRONG><a name="[295]"></a>usb_select_source</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = usb_select_source &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_spi
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_input_select
</UL>

<P><STRONG><a name="[1be]"></a>mdc_usb_input_select</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = mdc_usb_input_select &rArr; usb_select_source &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_bus_select
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_select_source
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_input_select
</UL>

<P><STRONG><a name="[25a]"></a>mdc_usb_task</STRONG> (Thumb, 374 bytes, Stack size 144 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = mdc_usb_task &rArr; sys_mdc_usb_msg_handler &rArr; do_file_seek &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_pa_set
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_getc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_poll_handler
</UL>

<P><STRONG><a name="[296]"></a>mdc_usb_task2</STRONG> (Thumb, 292 bytes, Stack size 144 bytes, mdc_usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_pa_set
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_getc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[176]"></a>mdc_usb_erase_flash</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = mdc_usb_erase_flash &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_getMsg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_spi
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>

<P><STRONG><a name="[177]"></a>mdc_usb_finish_program</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = mdc_usb_finish_program &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_spi
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>

<P><STRONG><a name="[16c]"></a>mdc_usb_send_block</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = mdc_usb_send_block &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_crc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_getMsg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_spi
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_send_block
</UL>

<P><STRONG><a name="[19f]"></a>blu_hw_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blu_hw_init &rArr; mdc_bus_select
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
</UL>

<P><STRONG><a name="[1ff]"></a>blu_send_msg</STRONG> (Thumb, 150 bytes, Stack size 168 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = blu_send_msg &rArr; blu_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_mute_reply
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_send_bluos_response_msg
</UL>

<P><STRONG><a name="[2a2]"></a>blu_report_hid</STRONG> (Thumb, 216 bytes, Stack size 88 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = blu_report_hid &rArr; blu_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_blu_task
</UL>

<P><STRONG><a name="[25b]"></a>mdc_blu_task</STRONG> (Thumb, 298 bytes, Stack size 144 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = mdc_blu_task &rArr; sys_mdc_blu_msg_handler &rArr; do_blu_volume_reply &rArr; blu_send_msg &rArr; blu_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_blu_msg_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_report_hid
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_service
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_getc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_poll_handler
</UL>

<P><STRONG><a name="[1a2]"></a>hdmi_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mdc_hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = hdmi_init &rArr; hdmi_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_ctl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
</UL>

<P><STRONG><a name="[1a3]"></a>hdmi_version_get</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, mdc_hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = hdmi_version_get &rArr; hdmi_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_ctl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
</UL>

<P><STRONG><a name="[1c2]"></a>hdmi_input_select</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mdc_hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = hdmi_input_select &rArr; hdmi_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_ctl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_input_select
</UL>

<P><STRONG><a name="[19a]"></a>ana_set_power</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, mdc_ana.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ana_set_power &rArr; HC595_Update &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
</UL>

<P><STRONG><a name="[19b]"></a>ana_init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, mdc_ana.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = ana_init &rArr; njw1195_volume_set &rArr; njw1195_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_volume_set
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
</UL>

<P><STRONG><a name="[1bd]"></a>mdc_ana_input_select</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, mdc_ana.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = mdc_ana_input_select &rArr; njw1195_input_set &rArr; njw1195_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Update
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_input_select
</UL>

<P><STRONG><a name="[2a8]"></a>mdc_ana_sample_set</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, mdc_ana.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Update
</UL>

<P><STRONG><a name="[2a9]"></a>mdc_ana_trimLevel_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mdc_ana.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_volume_set
</UL>

<P><STRONG><a name="[2aa]"></a>mdc_ana_mode_set</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mdc_ana.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Update
</UL>

<P><STRONG><a name="[3b8]"></a>mdc_ana_task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mdc_ana.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>hdmi_V2_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = hdmi_V2_init &rArr; hdmiv2_set_run_app &rArr; hdmiv2_bl_get_msg &rArr; hdmi_try_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_set_run_app
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
</UL>

<P><STRONG><a name="[1a1]"></a>hdmi_V2_version_get</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = hdmi_V2_version_get &rArr; hdmiv2_bl_get_msg &rArr; hdmi_try_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_bl_get_msg
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_try_write
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
</UL>

<P><STRONG><a name="[257]"></a>hdmi_v2_send_msg</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = hdmi_v2_send_msg &rArr; hdmi_write &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_volume_report
</UL>

<P><STRONG><a name="[1c1]"></a>hdmi_V2_input_select</STRONG> (Thumb, 556 bytes, Stack size 16 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = hdmi_V2_input_select &rArr; hdmi_write &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_spi_shortDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_input_select
</UL>

<P><STRONG><a name="[25c]"></a>hdmi_v2_task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = hdmi_v2_task &rArr; hdmiv2_check_loop &rArr; hdmiv2_msg_handler &rArr; hdmiv2_volume_cmd_handler &rArr; Send_SysTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_poll_handler
</UL>

<P><STRONG><a name="[f6]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalAddTimer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_prepare_test_environment
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_list_add_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_start_scroll
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scroll_update
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_name_record
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_list_append
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_list_add_next
</UL>

<P><STRONG><a name="[f8]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_start_scroll
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scroll_update
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_list_detach
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delect_file_list
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[11b]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_send_msg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_simple_print
</UL>

<P><STRONG><a name="[10b]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_report_hid
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_select_source
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
</UL>

<P><STRONG><a name="[2bd]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[84]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2c3]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[20b]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cmd_handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_time_update
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_seek
</UL>

<P><STRONG><a name="[2c7]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2f8]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[21d]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_test
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_treble_msg_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bass_msg_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_balance_msg_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_source_msg_handler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ir_channel_msg_handler
</UL>

<P><STRONG><a name="[22d]"></a>strtok</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cmd_handler
</UL>

<P><STRONG><a name="[217]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_balance_msg_handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
</UL>

<P><STRONG><a name="[10e]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_menu_to_file_list_handler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_dis_timeout_handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cur_src_state_update
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_status_update
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_usb_plug_out_hanlder
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_control
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_seek
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_music_play_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_music_pause_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_standby_poll
</UL>

<P><STRONG><a name="[209]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_setup_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_start_scroll
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scroll_update
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_name_record
</UL>

<P><STRONG><a name="[22f]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[21b]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_b_msg_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_a_msg_handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_action_msg_handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_msg_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mute_mag_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_auto_standby_msg_handler
</UL>

<P><STRONG><a name="[10a]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_env_data_section
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_setup_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_write
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_start_scroll
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scroll_update
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_send_msg
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_name_record
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_src_state_by_name
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_src_state
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_scroll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_simple_print
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_report_hid
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_select_source
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
</UL>

<P><STRONG><a name="[188]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_blu_msg_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_src_state_by_name
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_src_state
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_usb_plug_out_hanlder
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsOpen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsInit
</UL>

<P><STRONG><a name="[234]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_blu_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task2
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[2cd]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3b9]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
</UL>

<P><STRONG><a name="[2cf]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3ba]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_poll_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_setup_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_uart_poll_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_poll_handler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_start_scroll
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scroll_update
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_name_record
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_music_play_show
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[2d1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3bb]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc0_load
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eep_read
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_blu_task
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_send_msg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cmd_handler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_record_file_name
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nv_set_default
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_scroll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_simple_print
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_send_block
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_report_hid
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task2
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
</UL>

<P><STRONG><a name="[3bc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[235]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_scroll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_simple_print
</UL>

<P><STRONG><a name="[13c]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_all
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_i2c_test
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_test
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_test
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3be]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2c9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3bf]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2d4]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[9e]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[2d6]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[2d8]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[2cc]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[2be]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2bf]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2c0]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2c1]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2c2]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7c]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[2bc]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[34]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[2da]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[94]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[96]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[2db]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[8c]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[2de]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[88]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[90]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[2df]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[8a]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[92]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[7e]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[2c8]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2e4]"></a>_scanf_really_real</STRONG> (Thumb, 672 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[2c6]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[35]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2eb]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[2ca]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2cb]"></a>__strtok_internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[2ce]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[3c3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2d0]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[3c8]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3ca]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[a0]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2d3]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2dd]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[39]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3cb]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2f7]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[98]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[9a]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[2e8]"></a>__vfscanf</STRONG> (Thumb, 876 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[2ec]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2e1]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2dc]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[2d5]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[2ee]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[2ed]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[3cc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2f6]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2fd]"></a>_scanf_really_hex_real</STRONG> (Thumb, 776 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[38a]"></a>_scanf_really_infnan</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[aa]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2fa]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2f9]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ae]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[2fe]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[3cf]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[302]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2f1]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[304]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[303]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[307]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[305]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[306]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[2f2]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e3]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2f3]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e2]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[308]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[c4]"></a>ADCHardwareOversampleConfigure</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCHardwareOversampleConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[c7]"></a>ADCIntClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.ADCIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc0_load
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[ea]"></a>ADCIntStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc.o(i.ADCIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc0_load
</UL>

<P><STRONG><a name="[e9]"></a>ADCProcessorTrigger</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc0_load
</UL>

<P><STRONG><a name="[c3]"></a>ADCSequenceConfigure</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[eb]"></a>ADCSequenceDataGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc0_load
</UL>

<P><STRONG><a name="[c2]"></a>ADCSequenceDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDisable))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[c6]"></a>ADCSequenceEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[c5]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 132 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[31a]"></a>ConfigDescAlloc</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, usbhostenum.o(i.ConfigDescAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConfigDescAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[32e]"></a>ConfigDescFree</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, usbhostenum.o(i.ConfigDescFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ConfigDescFree
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDDeviceDisconnected
</UL>

<P><STRONG><a name="[187]"></a>FPULazyStackingEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPULazyStackingEnable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdaterMain
</UL>

<P><STRONG><a name="[309]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBDigital
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
</UL>

<P><STRONG><a name="[167]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_in_recive_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_front_recive_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_interrupt_handler
</UL>

<P><STRONG><a name="[b8]"></a>GPIOIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_init
</UL>

<P><STRONG><a name="[166]"></a>GPIOIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_in_recive_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_front_recive_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_interrupt_handler
</UL>

<P><STRONG><a name="[b5]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_in_polarity_check_handler
</UL>

<P><STRONG><a name="[30a]"></a>GPIOPadConfigSet</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBDigital
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
</UL>

<P><STRONG><a name="[ba]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hal_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nad_app_uart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bt_uart_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[165]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_read
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_interrupt_handler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_int_get
</UL>

<P><STRONG><a name="[c1]"></a>GPIOPinTypeADC</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[b1]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_sda
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_scl
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_sda
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_scl
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot2_sda
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot2_scl
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot1_sda
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot1_scl
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epprom_sda
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epprom_scl
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinInputPu
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_gpio_set_dir
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_check_busy
</UL>

<P><STRONG><a name="[b4]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_sda
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_scl
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_sda
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_scl
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot2_sda
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot2_scl
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot1_sda
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot1_scl
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epprom_sda
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epprom_scl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_low_power_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_gpio_set_dir
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_check_busy
</UL>

<P><STRONG><a name="[d5]"></a>GPIOPinTypePWM</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
</UL>

<P><STRONG><a name="[de]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_init
</UL>

<P><STRONG><a name="[bb]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hal_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nad_app_uart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bt_uart_init
</UL>

<P><STRONG><a name="[180]"></a>GPIOPinTypeUSBAnalog</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUSBAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeUSBAnalog &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[17f]"></a>GPIOPinTypeUSBDigital</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUSBDigital))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeUSBDigital &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[b7]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_protection_valid_handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_protection_invalid_handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hp_plug_out_handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hp_plug_in_handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_read
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_sda
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_scl
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_sda
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_scl
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot2_sda
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot2_scl
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot1_sda
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_slot1_scl
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epprom_sda
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epprom_scl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NADUartTaskEventLoop
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_write
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_pa_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_disable
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_psX_set
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_check_busy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bus_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_v2_send_msg
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_input_select
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_bus_select
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_power_set
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_iis_select
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_input_select
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_send_msg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_test
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srcrst_test
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_test
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_end
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_output_mode_select
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_pop_begin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_on_later_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_off
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_on
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_control
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_get_byte
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_try_write
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Update
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_write
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_report_hid
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_factory
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_normal
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_set
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_getc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_getc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_spi
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_enable_spi
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_read
</UL>

<P><STRONG><a name="[310]"></a>IntDisable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDMain
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHHubMain
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeWrite
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeRead
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[b6]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer1_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDMain
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHHubMain
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeWrite
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeRead
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[362]"></a>IntIsEnabled</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, interrupt.o(i.IntIsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[f0]"></a>IntMasterDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_extract
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_dequeue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_enqueue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
</UL>

<P><STRONG><a name="[f1]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_extract
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_dequeue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_enqueue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
</UL>

<P><STRONG><a name="[15d]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[317]"></a>InternalUSBHCDSendEvent</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbhostenum.o(i.InternalUSBHCDSendEvent))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDMain
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGSetMode
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDDeviceDisconnected
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[356]"></a>InternalUSBStartOfFrameTick</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbtick.o(i.InternalUSBStartOfFrameTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InternalUSBStartOfFrameTick
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
</UL>

<P><STRONG><a name="[337]"></a>InternalUSBTickInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbtick.o(i.InternalUSBTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[30d]"></a>OTGDeviceDisconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbmode.o(i.OTGDeviceDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OTGDeviceDisconnect &rArr; USBOTGSetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDDeviceDisconnected
</UL>

<P><STRONG><a name="[d4]"></a>PWMClockSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(i.PWMClockSet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
</UL>

<P><STRONG><a name="[d6]"></a>PWMGenConfigure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.PWMGenConfigure), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
</UL>

<P><STRONG><a name="[db]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
</UL>

<P><STRONG><a name="[d8]"></a>PWMGenPeriodGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_bright_control
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
</UL>

<P><STRONG><a name="[d7]"></a>PWMGenPeriodSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
</UL>

<P><STRONG><a name="[da]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_bright_control
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
</UL>

<P><STRONG><a name="[d9]"></a>PWMPulseWidthSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(i.PWMPulseWidthSet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_bright_control
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
</UL>

<P><STRONG><a name="[df]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_ctl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_init
</UL>

<P><STRONG><a name="[e2]"></a>SSIDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_ctl
</UL>

<P><STRONG><a name="[e0]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_ctl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_init
</UL>

<P><STRONG><a name="[158]"></a>SysCtlClockFreqSet</STRONG> (Thumb, 672 bytes, Stack size 28 bytes, sysctl.o(i.SysCtlClockFreqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysCtlClockFreqSet
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[ee]"></a>SysCtlDeepSleep</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlDeepSleep), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_low_power_handler
</UL>

<P><STRONG><a name="[b3]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hal_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_low_power_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm1_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer1_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer0_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nad_app_uart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bt_uart_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[312]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[32f]"></a>SysCtlUSBPLLEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlUSBPLLEnable))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
</UL>

<P><STRONG><a name="[15a]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[15b]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[159]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[c9]"></a>TimerConfigure</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer1_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer0_init
</UL>

<P><STRONG><a name="[cb]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer1_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer0_init
</UL>

<P><STRONG><a name="[d0]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
</UL>

<P><STRONG><a name="[cf]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer1_init
</UL>

<P><STRONG><a name="[ca]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer1_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer0_init
</UL>

<P><STRONG><a name="[cd]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer0_get_time
</UL>

<P><STRONG><a name="[160]"></a>UARTCharGetNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UARTCharGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_interrupt_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_interrupt_handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_handler
</UL>

<P><STRONG><a name="[11c]"></a>UARTCharPutNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UARTCharPutNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_printf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_send_byte
</UL>

<P><STRONG><a name="[161]"></a>UARTCharsAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTCharsAvail))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_interrupt_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_interrupt_handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_handler
</UL>

<P><STRONG><a name="[bc]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hal_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nad_app_uart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bt_uart_init
</UL>

<P><STRONG><a name="[be]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UARTEnable))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hal_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nad_app_uart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bt_uart_init
</UL>

<P><STRONG><a name="[15f]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_interrupt_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_interrupt_handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_handler
</UL>

<P><STRONG><a name="[bd]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hal_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nad_app_uart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bt_uart_init
</UL>

<P><STRONG><a name="[15e]"></a>UARTIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_interrupt_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_interrupt_handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_handler
</UL>

<P><STRONG><a name="[31d]"></a>ULPIConfigSet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbulpi.o(i.ULPIConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIRegWrite
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
</UL>

<P><STRONG><a name="[2e]"></a>USB0HostIntHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbhostenum.o(i.USB0HostIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB0HostIntHandler &rArr; USBHostIntHandlerInternal &rArr; InternalUSBStartOfFrameTick
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusControl
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[330]"></a>USBClockEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBClockEnable))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
</UL>

<P><STRONG><a name="[359]"></a>USBControllerVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBControllerVersion))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLibDMAInit
</UL>

<P><STRONG><a name="[367]"></a>USBDMAChannelAddressSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelAddressSet))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[36b]"></a>USBDMAChannelConfigSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[368]"></a>USBDMAChannelCountSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelCountSet))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[360]"></a>USBDMAChannelDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelRelease
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelDisable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[364]"></a>USBDMAChannelEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[361]"></a>USBDMAChannelIntDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelIntDisable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelDisable
</UL>

<P><STRONG><a name="[363]"></a>USBDMAChannelIntEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelIntEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[366]"></a>USBDMAChannelIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBIntStatus
</UL>

<P><STRONG><a name="[365]"></a>USBDMAChannelStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelStatus
</UL>

<P><STRONG><a name="[319]"></a>USBDescGetInterface</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbdesc.o(i.USBDescGetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBDescGetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCOpen
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[352]"></a>USBDescGetInterfaceEndpoint</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, usbdesc.o(i.USBDescGetInterfaceEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBDescGetInterfaceEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCOpen
</UL>

<P><STRONG><a name="[36e]"></a>USBEndpointDMAChannel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAChannel))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[36a]"></a>USBEndpointDMAConfigSet</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[348]"></a>USBEndpointDMADisable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMADisable))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeWrite
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeRead
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelRelease
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelDisable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[36c]"></a>USBEndpointDMAEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[32c]"></a>USBEndpointDataGet</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, usb.o(i.USBEndpointDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBEndpointDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
</UL>

<P><STRONG><a name="[324]"></a>USBEndpointDataPut</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, usb.o(i.USBEndpointDataPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeWrite
</UL>

<P><STRONG><a name="[326]"></a>USBEndpointDataSend</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDataSend))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeWrite
</UL>

<P><STRONG><a name="[342]"></a>USBEndpointDataToggleClear</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDataToggleClear))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeAllocSize
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeWrite
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeRead
</UL>

<P><STRONG><a name="[369]"></a>USBEndpointPacketCountSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb.o(i.USBEndpointPacketCountSet))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[327]"></a>USBEndpointStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb.o(i.USBEndpointStatus))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
</UL>

<P><STRONG><a name="[373]"></a>USBFIFOAddrGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBFIFOAddrGet))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>

<P><STRONG><a name="[343]"></a>USBFIFOConfigSet</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usb.o(i.USBFIFOConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeAllocSize
</UL>

<P><STRONG><a name="[329]"></a>USBFIFOFlush</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, usb.o(i.USBFIFOFlush))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
</UL>

<P><STRONG><a name="[315]"></a>USBHCDControlTransfer</STRONG> (Thumb, 558 bytes, Stack size 48 bytes, usbhostenum.o(i.USBHCDControlTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostRequestStatus
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostRequestIN
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostHubAddrSet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostEndpointStatusClear
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostEndpointDataAck
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostEndpointConfig
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostAddrSet
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFIFOFlush
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCDriveReady
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHHubMain
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeWrite
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeRead
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[34b]"></a>USBHCDHubDeviceConnected</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, usbhostenum.o(i.USBHCDHubDeviceConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBHCDHubDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHHubMain
</UL>

<P><STRONG><a name="[34c]"></a>USBHCDHubDeviceDisconnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhostenum.o(i.USBHCDHubDeviceDisconnected))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHHubMain
</UL>

<P><STRONG><a name="[185]"></a>USBHCDInit</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, usbhostenum.o(i.USBHCDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBHCDInit &rArr; USBHCDInitInternal &rArr; USBHCDPowerConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlUSBPLLEnable
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIEnable
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIDisable
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostMode
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBClockEnable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[17b]"></a>USBHCDMain</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, usbhostenum.o(i.USBHCDMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBHCDMain &rArr; ProcessUSBDeviceStateMachine &rArr; USBHCDDeviceDisconnected &rArr; OTGDeviceDisconnect &rArr; USBOTGSetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHHubMain
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostCheckPipes
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBHCDSendEvent
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdaterUSB
</UL>

<P><STRONG><a name="[341]"></a>USBHCDPipeAllocSize</STRONG> (Thumb, 714 bytes, Stack size 40 bytes, usbhostenum.o(i.USBHCDPipeAllocSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBHCDPipeAllocSize &rArr; USBHostHubAddrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostHubAddrSet
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostEndpointStatusClear
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostAddrSet
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFIFOConfigSet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataToggleClear
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCOpen
</UL>

<P><STRONG><a name="[344]"></a>USBHCDPipeConfig</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, usbhostenum.o(i.USBHCDPipeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBHCDPipeConfig &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostEndpointConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCOpen
</UL>

<P><STRONG><a name="[345]"></a>USBHCDPipeFree</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, usbhostenum.o(i.USBHCDPipeFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBHCDPipeFree &rArr; USBHostHubAddrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostRequestINClear
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostHubAddrSet
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCClose
</UL>

<P><STRONG><a name="[347]"></a>USBHCDPipeRead</STRONG> (Thumb, 470 bytes, Stack size 56 bytes, usbhostenum.o(i.USBHCDPipeRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBHCDPipeRead &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostRequestIN
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostEndpointDataAck
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataToggleClear
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSISendCommand
</UL>

<P><STRONG><a name="[349]"></a>USBHCDPipeWrite</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, usbhostenum.o(i.USBHCDPipeWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataToggleClear
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSISendCommand
</UL>

<P><STRONG><a name="[35b]"></a>USBHCDPowerAutomatic</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbhostenum.o(i.USBHCDPowerAutomatic))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGSetMode
</UL>

<P><STRONG><a name="[183]"></a>USBHCDPowerConfigInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbhostenum.o(i.USBHCDPowerConfigInit))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[33a]"></a>USBHCDPowerConfigSet</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbhostenum.o(i.USBHCDPowerConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBHCDPowerConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostPwrEnable
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostPwrConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[181]"></a>USBHCDRegisterDrivers</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhostenum.o(i.USBHCDRegisterDrivers))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[31b]"></a>USBHHubEnumerationComplete</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbhhub.o(i.USBHHubEnumerationComplete))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[318]"></a>USBHHubEnumerationError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbhhub.o(i.USBHHubEnumerationError))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[335]"></a>USBHHubInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usbhhub.o(i.USBHHubInit))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[340]"></a>USBHHubMain</STRONG> (Thumb, 880 bytes, Stack size 64 bytes, usbhhub.o(i.USBHHubMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBHHubMain &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDHubDeviceDisconnected
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDHubDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDMain
</UL>

<P><STRONG><a name="[16a]"></a>USBHMSCBlockRead</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbhmsc.o(i.USBHMSCBlockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBHMSCBlockRead &rArr; USBHSCSIRead10 &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSIRead10
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsReadMediaSector
</UL>

<P><STRONG><a name="[182]"></a>USBHMSCDriveOpen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbhmsc.o(i.USBHMSCDriveOpen))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[172]"></a>USBHMSCDriveReady</STRONG> (Thumb, 282 bytes, Stack size 80 bytes, usbhmsc.o(i.USBHMSCDriveReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USBHMSCDriveReady &rArr; USBHSCSITestUnitReady &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSITestUnitReady
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSIRequestSense
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSIReadCapacity
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSIInquiry
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>

<P><STRONG><a name="[34f]"></a>USBHSCSIInquiry</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, usbhscsi.o(i.USBHSCSIInquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBHSCSIInquiry &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSISendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCDriveReady
</UL>

<P><STRONG><a name="[34d]"></a>USBHSCSIRead10</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, usbhscsi.o(i.USBHSCSIRead10))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBHSCSIRead10 &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSISendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCBlockRead
</UL>

<P><STRONG><a name="[350]"></a>USBHSCSIReadCapacity</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, usbhscsi.o(i.USBHSCSIReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBHSCSIReadCapacity &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSISendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCDriveReady
</UL>

<P><STRONG><a name="[34e]"></a>USBHSCSIRequestSense</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, usbhscsi.o(i.USBHSCSIRequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBHSCSIRequestSense &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSISendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCDriveReady
</UL>

<P><STRONG><a name="[351]"></a>USBHSCSITestUnitReady</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, usbhscsi.o(i.USBHSCSITestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBHSCSITestUnitReady &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSISendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHMSCDriveReady
</UL>

<P><STRONG><a name="[322]"></a>USBHostAddrSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBHostAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeFree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeAllocSize
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
</UL>

<P><STRONG><a name="[33f]"></a>USBHostCheckPipes</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbhostenum.o(i.USBHostCheckPipes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBHostCheckPipes
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDMain
</UL>

<P><STRONG><a name="[323]"></a>USBHostEndpointConfig</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, usb.o(i.USBHostEndpointConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBHostEndpointConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[32d]"></a>USBHostEndpointDataAck</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb.o(i.USBHostEndpointDataAck))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeRead
</UL>

<P><STRONG><a name="[328]"></a>USBHostEndpointStatusClear</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usb.o(i.USBHostEndpointStatusClear))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeAllocSize
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
</UL>

<P><STRONG><a name="[325]"></a>USBHostHubAddrSet</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, usb.o(i.USBHostHubAddrSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBHostHubAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeFree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeAllocSize
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
</UL>

<P><STRONG><a name="[321]"></a>USBHostIntHandlerInternal</STRONG> (Thumb, 1118 bytes, Stack size 40 bytes, usbhostenum.o(i.USBHostIntHandlerInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBHostIntHandlerInternal &rArr; InternalUSBStartOfFrameTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGSessionRequest
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGMode
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLPMIntStatus
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusEndpoint
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostPwrEnable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostPwrDisable
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostEndpointStatusClear
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostEndpointDataAck
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBStartOfFrameTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0HostIntHandler
</UL>

<P><STRONG><a name="[33d]"></a>USBHostLPMConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb.o(i.USBHostLPMConfig))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[333]"></a>USBHostMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBHostMode))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
</UL>

<P><STRONG><a name="[34a]"></a>USBHostPwrConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb.o(i.USBHostPwrConfig))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPowerConfigSet
</UL>

<P><STRONG><a name="[354]"></a>USBHostPwrDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb.o(i.USBHostPwrDisable))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
</UL>

<P><STRONG><a name="[33b]"></a>USBHostPwrEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb.o(i.USBHostPwrEnable))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPowerConfigSet
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[32b]"></a>USBHostRequestIN</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBHostRequestIN))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeRead
</UL>

<P><STRONG><a name="[346]"></a>USBHostRequestINClear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBHostRequestINClear))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeFree
</UL>

<P><STRONG><a name="[32a]"></a>USBHostRequestStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBHostRequestStatus))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
</UL>

<P><STRONG><a name="[314]"></a>USBHostReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBHostReset))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[316]"></a>USBHostSpeedGet</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb.o(i.USBHostSpeedGet))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[35a]"></a>USBHostSuspend</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBHostSuspend))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGSetMode
</UL>

<P><STRONG><a name="[338]"></a>USBIntEnableControl</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb.o(i.USBIntEnableControl))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[339]"></a>USBIntEnableEndpoint</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBIntEnableEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[320]"></a>USBIntStatusControl</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usb.o(i.USBIntStatusControl))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0HostIntHandler
</UL>

<P><STRONG><a name="[358]"></a>USBIntStatusEndpoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBIntStatusEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
</UL>

<P><STRONG><a name="[33e]"></a>USBLPMIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb.o(i.USBLPMIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[357]"></a>USBLPMIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBLPMIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
</UL>

<P><STRONG><a name="[336]"></a>USBLibDMAInit</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, usbdma.o(i.USBLibDMAInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBLibDMAInit
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBControllerVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[334]"></a>USBNumEndpointsGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBNumEndpointsGet))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[355]"></a>USBOTGMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBOTGMode))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
</UL>

<P><STRONG><a name="[33c]"></a>USBOTGSessionRequest</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBOTGSessionRequest))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGSetMode
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostIntHandlerInternal
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
</UL>

<P><STRONG><a name="[184]"></a>USBStackModeSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbmode.o(i.USBStackModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[332]"></a>USBULPIDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb.o(i.USBULPIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
</UL>

<P><STRONG><a name="[331]"></a>USBULPIEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb.o(i.USBULPIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
</UL>

<P><STRONG><a name="[31e]"></a>USBULPIRegRead</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb.o(i.USBULPIRegRead))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
</UL>

<P><STRONG><a name="[31f]"></a>USBULPIRegWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb.o(i.USBULPIRegWrite))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
</UL>

<P><STRONG><a name="[2f5]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[225]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_volume_msg_handler
</UL>

<P><STRONG><a name="[35c]"></a>__hardfp_ldexp</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[35e]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[2e7]"></a>__mathlib_narrow</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __mathlib_narrow &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2ff]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2c4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[35f]"></a>frexp</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[36f]"></a>uDMAChannelAttributeDisable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelAttributeDisable))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelRelease
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[36d]"></a>uDMAChannelControlSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelControlSet))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBUnitSizeSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBArbSizeSet
</UL>

<P><STRONG><a name="[370]"></a>uDMAChannelDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelDisable
</UL>

<P><STRONG><a name="[371]"></a>uDMAChannelEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[372]"></a>uDMAChannelModeGet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelModeGet))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBIntStatus
</UL>

<P><STRONG><a name="[374]"></a>uDMAChannelTransferSet</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, udma.o(i.uDMAChannelTransferSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAChannelTransferSet
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>

<P><STRONG><a name="[17e]"></a>uDMAControlBaseSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udma.o(i.uDMAControlBaseSet))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[17d]"></a>uDMAEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udma.o(i.uDMAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>

<P><STRONG><a name="[a3]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[3a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1f4]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_volume_msg_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[375]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1f3]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_volume_cmd_handler
</UL>

<P><STRONG><a name="[378]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[37b]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[37f]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[2b3]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_volume_cmd_handler
</UL>

<P><STRONG><a name="[37d]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[37e]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2b5]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_volume_cmd_handler
</UL>

<P><STRONG><a name="[380]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2b6]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_volume_cmd_handler
</UL>

<P><STRONG><a name="[3d0]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1f2]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_volume_cmd_handler
</UL>

<P><STRONG><a name="[3d1]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1f1]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_volume_msg_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_volume_cmd_handler
</UL>

<P><STRONG><a name="[381]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[384]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2b4]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_volume_cmd_handler
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[382]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[377]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[37a]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_volume_msg_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[383]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
</UL>

<P><STRONG><a name="[385]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_blu_status_menu_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_source_menu_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_main_msg_handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_volume_msg_handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blu_volume_reply
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_send_bluos_response_msg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
</UL>

<P><STRONG><a name="[387]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[388]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[9c]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[3d2]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3d3]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[376]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[80]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[37c]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[35d]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[2ea]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2e6]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2e5]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[389]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[27]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>get_env_sys_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_env.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_print_env
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_save
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
</UL>

<P><STRONG><a name="[ff]"></a>get_env_body_start_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osal_env.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_default_env
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_size
</UL>

<P><STRONG><a name="[fc]"></a>set_env_end_addr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = set_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_default_env
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
</UL>

<P><STRONG><a name="[fd]"></a>get_env_end_addr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_size
</UL>

<P><STRONG><a name="[fe]"></a>get_env_body_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_end_addr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_start_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_env_data_section
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_env_crc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_uesd_size
</UL>

<P><STRONG><a name="[100]"></a>get_env_uesd_size</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = get_env_uesd_size &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_size
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_save
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
</UL>

<P><STRONG><a name="[101]"></a>set_env_crc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osal_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
</UL>

<P><STRONG><a name="[102]"></a>get_env_crc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osal_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_crc_is_ok
</UL>

<P><STRONG><a name="[103]"></a>calc_env_crc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = calc_env_crc &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_size
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_save
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_crc_is_ok
</UL>

<P><STRONG><a name="[105]"></a>env_crc_is_ok</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, osal_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_env_crc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_load
</UL>

<P><STRONG><a name="[109]"></a>append_env</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = append_env &rArr; get_env_uesd_size &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_uesd_size
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_end_addr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env_end_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
</UL>

<P><STRONG><a name="[10d]"></a>find_env</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = find_env &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_size
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_get
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_then_append_env
</UL>

<P><STRONG><a name="[10f]"></a>delete_then_append_env</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = delete_then_append_env &rArr; append_env &rArr; get_env_uesd_size &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_env
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_size
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_end_addr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env_end_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_set
</UL>

<P><STRONG><a name="[114]"></a>osal_env_load</STRONG> (Thumb, 662 bytes, Stack size 32 bytes, osal_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nv_read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_default_env
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_crc_is_ok
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env_crc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_size
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env_end_addr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_start_addr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_sys_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_env_init
</UL>

<P><STRONG><a name="[119]"></a>print_env_data_section</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, osal_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = print_env_data_section &rArr; get_env_body_size &rArr; get_env_end_addr &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_body_size
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_print_env
</UL>

<P><STRONG><a name="[11d]"></a>flash_erase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nv_write
</UL>

<P><STRONG><a name="[13d]"></a>find_cmd</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, osal_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = find_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[13e]"></a>cmd_process</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, osal_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = cmd_process &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_command
</UL>

<P><STRONG><a name="[13f]"></a>parse_line</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, osal_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = parse_line &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_run_command
</UL>

<P><STRONG><a name="[142]"></a>iic_half_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, osal_soft_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_ack_in
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_byte_in
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_bit_out
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
</UL>

<P><STRONG><a name="[145]"></a>iic_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, osal_soft_iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_ack_in
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_bit_in
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_bit_out
</UL>

<P><STRONG><a name="[141]"></a>iic_start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_start
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_half_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_buf
</UL>

<P><STRONG><a name="[143]"></a>iic_stop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_half_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_buf
</UL>

<P><STRONG><a name="[144]"></a>iic_bit_out</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic_bit_out
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_half_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_byte_out
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_byte_in
</UL>

<P><STRONG><a name="[146]"></a>iic_bit_in</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic_bit_in
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_byte_in
</UL>

<P><STRONG><a name="[147]"></a>iic_byte_in</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iic_byte_in &rArr; iic_bit_in
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_bit_in
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_bit_out
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_half_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
</UL>

<P><STRONG><a name="[148]"></a>iic_ack_in</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic_ack_in
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_half_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_byte_out
</UL>

<P><STRONG><a name="[149]"></a>iic_byte_out</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, osal_soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_ack_in
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_bit_out
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_read_buf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_buf
</UL>

<P><STRONG><a name="[17]"></a>key_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, osal_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = key_read &rArr; ui_key_read
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_key.o(.data)
</UL>
<P><STRONG><a name="[156]"></a>print_version</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = print_version &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>hal_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = hal_init &rArr; bsp_gpio_init &rArr; GPIOPinInputPu &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hal_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer1_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer0_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nad_app_uart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bt_uart_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>c_printf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_poll_handler
</UL>

<P><STRONG><a name="[33]"></a>MSCCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSCCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_stick_update.o(.text)
</UL>
<P><STRONG><a name="[16b]"></a>usb_send_block</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = usb_send_block &rArr; mdc_usb_send_block &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_block
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgramHexRecord
</UL>

<P><STRONG><a name="[16d]"></a>_get_block_address</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = _get_block_address &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgramHexRecord
</UL>

<P><STRONG><a name="[16f]"></a>do_hex_decode_and_upgrade</STRONG> (Thumb, 936 bytes, Stack size 24 bytes, usb_stick_update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = do_hex_decode_and_upgrade &rArr; USB_ProgramHexRecord &rArr; usb_send_block &rArr; mdc_usb_send_block &rArr; usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToHexNibble
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgramHexRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAppAndProgram
</UL>

<P><STRONG><a name="[189]"></a>SimpleFsGetNextCluster</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, simple_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SimpleFsGetNextCluster &rArr; SimpleFsReadMediaSector &rArr; USBHMSCBlockRead &rArr; USBHSCSIRead10 &rArr; USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsReadMediaSector
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleFsGetNextFileSector
</UL>

<P><STRONG><a name="[18a]"></a>lcd_scroll_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, soft_timer_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = lcd_scroll_handler &rArr; dis_print_scroll &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_Flag_Valid
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_scroll
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOutEventLoop
</UL>

<P><STRONG><a name="[18d]"></a>ir_in_polarity_check_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, soft_timer_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ir_in_polarity_check_handler &rArr; osal_start_timerEx &rArr; osalAddTimer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerOutEventLoop
</UL>

<P><STRONG><a name="[191]"></a>sys_database_save</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = sys_database_save &rArr; eeprom_write &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nv_set_default
</UL>

<P><STRONG><a name="[193]"></a>sys_nv_set_default</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = sys_nv_set_default &rArr; sys_database_save &rArr; eeprom_write &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_save
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
</UL>

<P><STRONG><a name="[194]"></a>sys_running_parameter_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_running_parameter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_database_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
</UL>

<P><STRONG><a name="[196]"></a>sys_hw_power_on</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_hw_power_on &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>

<P><STRONG><a name="[198]"></a>sys_hw_power_off</STRONG> (Thumb, 574 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_hw_power_off &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
</UL>

<P><STRONG><a name="[199]"></a>sys_mdc_power_on</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = sys_mdc_power_on &rArr; mdc_usb_init &rArr; usb_bl_runApp &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_power_set
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_dio_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_version_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_version_get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_set_power
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>

<P><STRONG><a name="[1a5]"></a>sys_treble_vol_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_treble_vol_set &rArr; njw1194_treble_set &rArr; njw1194_write &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_treble_set
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_treble_msg_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_init
</UL>

<P><STRONG><a name="[1a7]"></a>sys_bass_vol_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_bass_vol_set &rArr; njw1194_bass_set &rArr; njw1194_write &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_bass_set
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bass_msg_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_init
</UL>

<P><STRONG><a name="[1a9]"></a>sys_input_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = sys_input_init &rArr; src4382_init &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcm1795_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bass_vol_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_treble_vol_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>

<P><STRONG><a name="[1ac]"></a>sys_output_control</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_output_control &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_check
</UL>

<P><STRONG><a name="[1ad]"></a>do_power_on_later_handler</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = do_power_on_later_handler &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_control
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
</UL>

<P><STRONG><a name="[1b0]"></a>show_protection_infor</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = show_protection_infor &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_check
</UL>

<P><STRONG><a name="[1b6]"></a>sys_hw_power_check</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = sys_hw_power_check &rArr; sys_master_vol_set &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_protection_infor
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_output_control
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>

<P><STRONG><a name="[1b7]"></a>do_delect_file_list</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_delect_file_list &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_usb_plug_out_hanlder
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
</UL>

<P><STRONG><a name="[1b8]"></a>sys_power_off_handler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = sys_power_off_handler &rArr; sys_hw_power_off &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_power_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_all_src_state
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delect_file_list
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_off
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trigger_invalid_handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_msg_handler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_stanby_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_key_msg_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_off_handler
</UL>

<P><STRONG><a name="[1bc]"></a>sys_mdc_input_select</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = sys_mdc_input_select &rArr; mdc_usb_input_select &rArr; usb_select_source &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_input_select
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_bus_select
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_iis_select
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_dio_input_select
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_input_select
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_input_select
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
</UL>

<P><STRONG><a name="[1c5]"></a>sys_constant_input_select</STRONG> (Thumb, 672 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = sys_constant_input_select &rArr; src4382_SRC_input_select &rArr; src4382_PortA_input_select &rArr; src4382_setpin &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_SRC_input_select
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_input_select
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_Mute_Control
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_input_select
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_src_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
</UL>

<P><STRONG><a name="[1cb]"></a>sys_power_on_handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = sys_power_on_handler &rArr; lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_all_protect_state
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_main_msg_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_check
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_power_on
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_hw_power_on
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_control
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_trigger_valid_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_power_msg_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_key_msg_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_on_handler
</UL>

<P><STRONG><a name="[1d0]"></a>sys_bt_play_pause</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = sys_bt_play_pause &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
</UL>

<P><STRONG><a name="[1d5]"></a>src_jump</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_select_handler
</UL>

<P><STRONG><a name="[1d4]"></a>sys_src_select_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = sys_src_select_handler &rArr; sys_input_select &rArr; sys_constant_input_select &rArr; src4382_SRC_input_select &rArr; src4382_PortA_input_select &rArr; src4382_setpin &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_jump
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
</UL>

<P><STRONG><a name="[1d6]"></a>sys_config_menu_prev</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_config_menu_prev &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_up_key_handler
</UL>

<P><STRONG><a name="[1d7]"></a>sys_config_menu_next</STRONG> (Thumb, 408 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_config_menu_next &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_down_key_handler
</UL>

<P><STRONG><a name="[1d9]"></a>sys_usb_file_prev</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_up_key_handler
</UL>

<P><STRONG><a name="[1d8]"></a>sys_up_key_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = sys_up_key_handler &rArr; sys_config_menu_prev &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_prev
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_config_menu_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
</UL>

<P><STRONG><a name="[1da]"></a>sys_usb_file_next</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = sys_usb_file_next &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_down_key_handler
</UL>

<P><STRONG><a name="[1dc]"></a>sys_down_key_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = sys_down_key_handler &rArr; sys_usb_file_next &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_next
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_config_menu_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
</UL>

<P><STRONG><a name="[1dd]"></a>sys_enter_key_handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = sys_enter_key_handler &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
</UL>

<P><STRONG><a name="[1e0]"></a>sys_speaker_mode_select_handler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_speaker_mode_select_handler &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc595_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_b_msg_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_speaker_a_msg_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
</UL>

<P><STRONG><a name="[1e1]"></a>sys_auto_stanby_onoff_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_auto_stanby_onoff_handler &rArr; osal_stop_timerEx &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_auto_standby_msg_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
</UL>

<P><STRONG><a name="[1e2]"></a>sys_balance_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = sys_balance_set &rArr; sys_master_vol_set &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_balance_msg_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
</UL>

<P><STRONG><a name="[1e3]"></a>sys_left_key_handler</STRONG> (Thumb, 584 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = sys_left_key_handler &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_balance_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_stanby_onoff_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_speaker_mode_select_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bass_vol_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_treble_vol_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
</UL>

<P><STRONG><a name="[1e4]"></a>sys_right_key_handler</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = sys_right_key_handler &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_balance_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_stanby_onoff_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_speaker_mode_select_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bass_vol_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_treble_vol_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
</UL>

<P><STRONG><a name="[1e5]"></a>sys_bt_go_pairng</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_bt_go_pairng &rArr; bt_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_enter_long_down_handler
</UL>

<P><STRONG><a name="[1e6]"></a>_mdc_firmware_upgrade_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = _mdc_firmware_upgrade_handler &rArr; dis_simple_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_power_set
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_simple_print
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUSBInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_enter_long_down_handler
</UL>

<P><STRONG><a name="[1e7]"></a>sys_enter_long_down_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = sys_enter_long_down_handler &rArr; _mdc_firmware_upgrade_handler &rArr; dis_simple_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mdc_firmware_upgrade_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bt_go_pairng
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
</UL>

<P><STRONG><a name="[1ec]"></a>sys_src_next_key_long_down_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = sys_src_next_key_long_down_handler &rArr; sys_factory_reset &rArr; display_factory_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_key_is_down
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_msg_handler
</UL>

<P><STRONG><a name="[1ed]"></a>keyboard_msg_handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = keyboard_msg_handler &rArr; sys_down_key_handler &rArr; sys_usb_file_next &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_key_long_down_handler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_enter_long_down_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_enter_key_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_down_key_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_up_key_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
</UL>

<P><STRONG><a name="[1ee]"></a>sys_ir_on_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = sys_ir_on_handler &rArr; sys_power_on_handler &rArr; lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
</UL>

<P><STRONG><a name="[1ef]"></a>sys_ir_off_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = sys_ir_off_handler &rArr; sys_power_off_handler &rArr; sys_hw_power_off &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
</UL>

<P><STRONG><a name="[1f0]"></a>sys_vol_control_handler</STRONG> (Thumb, 536 bytes, Stack size 56 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = sys_vol_control_handler &rArr; sys_master_vol_set &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_volume_msg_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mute_control
</UL>

<P><STRONG><a name="[1f7]"></a>sys_mute_control</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = sys_mute_control &rArr; sys_vol_control_handler &rArr; sys_master_vol_set &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
</UL>

<P><STRONG><a name="[1f8]"></a>sys_music_pause_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = sys_music_pause_handler &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
</UL>

<P><STRONG><a name="[1f9]"></a>sys_music_play_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = sys_music_play_handler &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
</UL>

<P><STRONG><a name="[1fa]"></a>sys_show_config_menu_handler</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_show_config_menu_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_command_handler
</UL>

<P><STRONG><a name="[1fb]"></a>sys_ir_command_handler</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = sys_ir_command_handler &rArr; sys_down_key_handler &rArr; sys_usb_file_next &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_MdcTask_Msg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_show_config_menu_handler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_music_play_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_music_pause_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mute_control
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_off_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_ir_on_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_right_key_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_left_key_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_enter_key_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_down_key_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_up_key_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_select_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
</UL>

<P><STRONG><a name="[1fd]"></a>power_key_msg_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = power_key_msg_handler &rArr; sys_power_on_handler &rArr; lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
</UL>

<P><STRONG><a name="[1fe]"></a>sys_send_bluos_response_msg</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = sys_send_bluos_response_msg &rArr; blu_send_msg &rArr; blu_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_send_msg
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
</UL>

<P><STRONG><a name="[200]"></a>sys_auto_stanby_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = sys_auto_stanby_handler &rArr; sys_power_off_handler &rArr; sys_hw_power_off &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
</UL>

<P><STRONG><a name="[201]"></a>sys_usb_file_list_update_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = sys_usb_file_list_update_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
</UL>

<P><STRONG><a name="[202]"></a>sys_usb_reading_timeout_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = sys_usb_reading_timeout_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEventLoop
</UL>

<P><STRONG><a name="[204]"></a>src_list_add_next</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = src_list_add_next &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_list_create
</UL>

<P><STRONG><a name="[20a]"></a>do_file_seek</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = do_file_seek &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
</UL>

<P><STRONG><a name="[20c]"></a>do_music_play_show</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = do_music_play_show &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_scroll_update
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cur_src_state_update
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_blu_msg_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
</UL>

<P><STRONG><a name="[20e]"></a>do_record_file_name</STRONG> (Thumb, 340 bytes, Stack size 88 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = do_record_file_name &rArr; sys_usb_file_name_record &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_Flag_Valid
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_file_list_load_cur
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usb_file_name_record
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_src_state
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
</UL>

<P><STRONG><a name="[211]"></a>do_music_play_time_update</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = do_music_play_time_update &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_blu_msg_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
</UL>

<P><STRONG><a name="[212]"></a>do_music_play_control</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = do_music_play_control &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cur_src_state_update
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_blu_msg_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
</UL>

<P><STRONG><a name="[213]"></a>do_usb_plug_out_hanlder</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = do_usb_plug_out_hanlder &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_src_state_by_name
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delect_file_list
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_usb_msg_handler
</UL>

<P><STRONG><a name="[215]"></a>do_blu_mute_reply</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = do_blu_mute_reply &rArr; blu_send_msg &rArr; blu_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_blu_msg_handler
</UL>

<P><STRONG><a name="[216]"></a>do_blu_volume_reply</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = do_blu_volume_reply &rArr; blu_send_msg &rArr; blu_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_send_msg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_master_vol_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_blu_msg_handler
</UL>

<P><STRONG><a name="[218]"></a>do_blu_status_update</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = do_blu_status_update &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mdc_blu_msg_handler
</UL>

<P><STRONG><a name="[21a]"></a>do_auto_standby_msg_handler</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = do_auto_standby_msg_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_auto_stanby_onoff_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[21c]"></a>do_ir_channel_msg_handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = do_ir_channel_msg_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[21e]"></a>do_model_msg_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = do_model_msg_handler &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[21f]"></a>do_mute_mag_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = do_mute_mag_handler &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[220]"></a>do_power_msg_handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = do_power_msg_handler &rArr; sys_power_on_handler &rArr; lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_on_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_power_off_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[221]"></a>do_source_msg_handler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = do_source_msg_handler &rArr; sys_input_select &rArr; sys_constant_input_select &rArr; src4382_SRC_input_select &rArr; src4382_PortA_input_select &rArr; src4382_setpin &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_prev_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_src_next_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_input_select
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[222]"></a>do_source_num_msg_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = do_source_num_msg_handler &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[223]"></a>do_version_msg_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = do_version_msg_handler &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[224]"></a>do_volume_msg_handler</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = do_volume_msg_handler &rArr; sys_vol_control_handler &rArr; sys_master_vol_set &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vol_control_handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[226]"></a>do_action_msg_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = do_action_msg_handler &rArr; sys_factory_reset &rArr; display_factory_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[227]"></a>do_balance_msg_handler</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = do_balance_msg_handler &rArr; sys_balance_set &rArr; sys_master_vol_set &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_balance_set
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[228]"></a>do_bass_msg_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = do_bass_msg_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_bass_vol_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[229]"></a>do_treble_msg_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = do_treble_msg_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_treble_vol_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[22a]"></a>do_speaker_a_msg_handler</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = do_speaker_a_msg_handler &rArr; sys_speaker_mode_select_handler &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_speaker_mode_select_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[22b]"></a>do_speaker_b_msg_handler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = do_speaker_b_msg_handler &rArr; sys_speaker_mode_select_handler &rArr; hc595_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_speaker_mode_select_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[231]"></a>do_tone_defeat_msg_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[230]"></a>parse_line</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parse_line
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[22c]"></a>ble_cmd_handler</STRONG> (Thumb, 144 bytes, Stack size 104 bytes, system_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ble_cmd_handler &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_send_byte
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
</UL>

<P><STRONG><a name="[233]"></a>dis_print</STRONG> (Thumb, 270 bytes, Stack size 168 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_Flag_Valid
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_firmware_upgrade_menu_handler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_balance_control_menu_handler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_bass_control_menu_handler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_treble_control_menu_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_firmware_version_menu_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_ac_error_menu_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_over_temp_menu_handler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_dc_error_menu_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_speaker_mode_select_menu_handler
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_reading_menu_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_bt_status_menu_handler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_auto_standby_menu_handler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_ir_channel_select_menu_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_line_out_select_menu
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_output_select_menu
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_blu_status_menu_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_not_insert_menu_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_play_menu_handler
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_file_list_menu_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_source_menu_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init_menu
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_menu
</UL>

<P><STRONG><a name="[238]"></a>dis_source_menu_handler</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = dis_source_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[239]"></a>dis_print_arrow</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = dis_print_arrow &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_file_list_menu_handler
</UL>

<P><STRONG><a name="[23a]"></a>dis_usb_file_list_menu_handler</STRONG> (Thumb, 648 bytes, Stack size 24 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = dis_usb_file_list_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print_arrow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[23b]"></a>dis_start_scroll</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dis_start_scroll &rArr; osal_start_timerEx &rArr; osalAddTimer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_play_menu_handler
</UL>

<P><STRONG><a name="[23c]"></a>dis_usb_play_menu_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = dis_usb_play_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_Flag_Valid
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_state_update
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_start_scroll
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[23e]"></a>dis_usb_not_insert_menu_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_usb_not_insert_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[23f]"></a>dis_blu_status_menu_handler</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = dis_blu_status_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[240]"></a>dis_output_select_menu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dis_output_select_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_output_mode_select
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[241]"></a>dis_line_out_select_menu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dis_line_out_select_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_line_out_mode_select
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[242]"></a>dis_ir_channel_select_menu_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_ir_channel_select_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[243]"></a>dis_auto_standby_menu_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_auto_standby_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[244]"></a>dis_bt_status_menu_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dis_bt_status_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_dis_timeout_handler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[245]"></a>dis_usb_reading_menu_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_usb_reading_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[246]"></a>dis_speaker_mode_select_menu_handler</STRONG> (Thumb, 492 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_speaker_mode_select_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Bitmap_Flag
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[247]"></a>dis_dc_error_menu_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_dc_error_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[248]"></a>dis_over_temp_menu_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_over_temp_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[249]"></a>dis_ac_error_menu_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_ac_error_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[24a]"></a>dis_firmware_version_menu_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_firmware_version_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[24b]"></a>dis_treble_control_menu_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_treble_control_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[24c]"></a>dis_bass_control_menu_handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dis_bass_control_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[24d]"></a>dis_balance_control_menu_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dis_balance_control_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[24e]"></a>dis_firmware_upgrade_menu_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dis_firmware_upgrade_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_print
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispaly_update_handler
</UL>

<P><STRONG><a name="[24f]"></a>dispaly_update_handler</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = dispaly_update_handler &rArr; dis_blu_status_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_firmware_upgrade_menu_handler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_balance_control_menu_handler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_bass_control_menu_handler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_treble_control_menu_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_firmware_version_menu_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_ac_error_menu_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_over_temp_menu_handler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_dc_error_menu_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_speaker_mode_select_menu_handler
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_reading_menu_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_bt_status_menu_handler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_auto_standby_menu_handler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_ir_channel_select_menu_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_line_out_select_menu
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_output_select_menu
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_blu_status_menu_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_not_insert_menu_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_play_menu_handler
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_usb_file_list_menu_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_source_menu_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskEventLoop
</UL>

<P><STRONG><a name="[250]"></a>vol_dis_timeout_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = vol_dis_timeout_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deregister_Bitmap_Flag
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskEventLoop
</UL>

<P><STRONG><a name="[251]"></a>src_dis_timeout_handler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = src_dis_timeout_handler &rArr; dis_bt_status_menu_handler &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_bt_status_menu_handler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskEventLoop
</UL>

<P><STRONG><a name="[252]"></a>src_menu_to_file_list_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = src_menu_to_file_list_handler &rArr; Send_DisplayTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskEventLoop
</UL>

<P><STRONG><a name="[253]"></a>menu_list_add_next</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, display_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = menu_list_add_next &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_list_create
</UL>

<P><STRONG><a name="[254]"></a>do_bt_msg_handler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = do_bt_msg_handler &rArr; src4382_PortB_Mute_Control &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortB_Mute_Control
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_jump
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DisplayTask_Msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_update_src_state
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_poll_handler
</UL>

<P><STRONG><a name="[256]"></a>do_mdc_volume_report</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mdc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = do_mdc_volume_report &rArr; hdmi_v2_send_msg &rArr; hdmi_write &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_v2_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_volume_event_handler
</UL>

<P><STRONG><a name="[258]"></a>mdc_volume_event_handler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mdc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = mdc_volume_event_handler &rArr; do_mdc_volume_report &rArr; hdmi_v2_send_msg &rArr; hdmi_write &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_volume_report
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdcEventLoop
</UL>

<P><STRONG><a name="[259]"></a>mdc_poll_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mdc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = mdc_poll_handler &rArr; mdc_usb_task &rArr; sys_mdc_usb_msg_handler &rArr; do_file_seek &rArr; mdc_usb_send_msg &rArr; usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_blu_task
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_v2_task
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdcEventLoop
</UL>

<P><STRONG><a name="[25e]"></a>nad_uart_poll_handler</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, nad_uart_app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = nad_uart_poll_handler &rArr; sys_nad_uart_msg_handler &rArr; do_power_msg_handler &rArr; sys_power_on_handler &rArr; lcd_init &rArr; display_init_menu &rArr; dis_print &rArr; lcd_write_data &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_len
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_nad_uart_msg_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Soft_Task_Msg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NADUartTaskEventLoop
</UL>

<P><STRONG><a name="[25f]"></a>protection_later_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nad_uart_app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = protection_later_handler &rArr; update_detect_state &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_detect_state
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NADUartTaskEventLoop
</UL>

<P><STRONG><a name="[261]"></a>src4382_setpin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, src4382.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = src4382_setpin &rArr; osal_iic_write_byte &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_iic_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_PortA_input_select
</UL>

<P><STRONG><a name="[269]"></a>njw1195_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, njw1194.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_write
</UL>

<P><STRONG><a name="[268]"></a>njw1194_write</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, njw1194.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = njw1194_write &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_volume_set
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_volume_r_set
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_volume_l_set
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_treble_set
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_input_select
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1194_bass_set
</UL>

<P><STRONG><a name="[26b]"></a>lcd_bus_write</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lcd_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_bus_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>

<P><STRONG><a name="[26c]"></a>lcd_check_busy</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, lcd_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lcd_check_busy &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadSinglePin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_cmd
</UL>

<P><STRONG><a name="[271]"></a>mdc_adc_cmp</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mdc_adc_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
</UL>

<P><STRONG><a name="[26d]"></a>mdc_slot_init</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = mdc_slot_init &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
</UL>

<P><STRONG><a name="[272]"></a>mdc_slot_update</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
</UL>

<P><STRONG><a name="[26e]"></a>mdc_setup_init</STRONG> (Thumb, 1092 bytes, Stack size 40 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = mdc_setup_init &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
</UL>

<P><STRONG><a name="[273]"></a>mdc_card_name_update</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mdc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
</UL>

<P><STRONG><a name="[26f]"></a>mdc_adc_load</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = mdc_adc_load &rArr; bsp_adc0_load &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc0_load
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
</UL>

<P><STRONG><a name="[270]"></a>mdc_prepare_test_environment</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = mdc_prepare_test_environment &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_power_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_init
</UL>

<P><STRONG><a name="[27b]"></a>do_test_report</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = do_test_report &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_power_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_handler
</UL>

<P><STRONG><a name="[27c]"></a>test_start_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = test_start_handler &rArr; do_test_report &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_test_report
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test_task_handler
</UL>

<P><STRONG><a name="[27d]"></a>test_wait_for_start_confirm_handler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = test_wait_for_start_confirm_handler &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test_task_handler
</UL>

<P><STRONG><a name="[27e]"></a>test_wait_for_restart_confirm_handler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = test_wait_for_restart_confirm_handler &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test_task_handler
</UL>

<P><STRONG><a name="[27f]"></a>do_voltage_test</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = do_voltage_test &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_test
</UL>

<P><STRONG><a name="[280]"></a>do_usb_test</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = do_usb_test &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_test
</UL>

<P><STRONG><a name="[281]"></a>test_input_select</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = test_input_select &rArr; AK4118_write &rArr; AK4118_read &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_write
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak4118_on_test_card_init
</UL>

<P><STRONG><a name="[283]"></a>ak4118_on_test_card_init</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ak4118_on_test_card_init &rArr; test_input_select &rArr; AK4118_write &rArr; AK4118_read &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_ctl
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AK4118_write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_spi_test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opt_test
</UL>

<P><STRONG><a name="[284]"></a>do_opt_test</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = do_opt_test &rArr; src4382_audio_detect &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src4382_audio_detect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak4118_on_test_card_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_test
</UL>

<P><STRONG><a name="[285]"></a>do_spi_test</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = do_spi_test &rArr; ak4118_on_test_card_init &rArr; test_input_select &rArr; AK4118_write &rArr; AK4118_read &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak4118_on_test_card_init
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_test
</UL>

<P><STRONG><a name="[286]"></a>do_gpio_test</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = do_gpio_test &rArr; nad_send_str &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_int_get
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_pa_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_gpio_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_gpio_set_dir
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_psX_set
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_test
</UL>

<P><STRONG><a name="[287]"></a>do_i2c_test</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = do_i2c_test &rArr; eeprom_read &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_test
</UL>

<P><STRONG><a name="[288]"></a>do_mdc_test</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = do_mdc_test &rArr; do_i2c_test &rArr; eeprom_read &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_i2c_test
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gpio_test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_spi_test
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_opt_test
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_usb_test
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_voltage_test
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_process_handler
</UL>

<P><STRONG><a name="[289]"></a>test_process_handler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = test_process_handler &rArr; do_mdc_test &rArr; do_i2c_test &rArr; eeprom_read &rArr; osal_iic_read_buf &rArr; osal_iic_write_buf &rArr; iic_byte_out &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_mdc_test
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nad_send_str
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_test_task_handler
</UL>

<P><STRONG><a name="[290]"></a>usb_spi_shortDelay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdc_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_getc
</UL>

<P><STRONG><a name="[28b]"></a>usb_enable_spi</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_enable_spi &rArr; mdc_pa_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_pa_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_check_flash_status
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_block
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_finish_program
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_erase_flash
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_select_source
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_get_version
</UL>

<P><STRONG><a name="[28c]"></a>usb_disable_spi</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_disable_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_check_flash_status
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_block
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_finish_program
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_erase_flash
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_select_source
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_get_version
</UL>

<P><STRONG><a name="[28d]"></a>usb_read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = usb_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_msg
</UL>

<P><STRONG><a name="[28e]"></a>usb_write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_check_flash_status
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_block
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_finish_program
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_erase_flash
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_select_source
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_runApp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_get_version
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_getMsg
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_getc
</UL>

<P><STRONG><a name="[28f]"></a>usb_getc</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = usb_getc &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_ring_buffer_empty
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_spi_shortDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_task2
</UL>

<P><STRONG><a name="[291]"></a>usb_bl_getMsg</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mdc_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = usb_bl_getMsg &rArr; usb_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_write
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_check_flash_status
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_block
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_erase_flash
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bl_get_version
</UL>

<P><STRONG><a name="[297]"></a>update_crc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mdc_usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_usb_send_block
</UL>

<P><STRONG><a name="[29b]"></a>blu_spi_shortDelay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdc_bt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_getc
</UL>

<P><STRONG><a name="[298]"></a>blu_read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = blu_read &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_send_msg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_report_hid
</UL>

<P><STRONG><a name="[299]"></a>blu_write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = blu_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_getc
</UL>

<P><STRONG><a name="[29a]"></a>blu_getc</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = blu_getc &rArr; blu_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_ring_buffer_empty
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_write
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_spi_shortDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_blu_task
</UL>

<P><STRONG><a name="[29c]"></a>blu_hw_set</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blu_hw_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_service
</UL>

<P><STRONG><a name="[29d]"></a>blu_resume_power</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = blu_resume_power &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_power_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_service
</UL>

<P><STRONG><a name="[29e]"></a>blu_hw_normal</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blu_hw_normal
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_service
</UL>

<P><STRONG><a name="[29f]"></a>blu_hw_factory</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blu_hw_factory
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_service
</UL>

<P><STRONG><a name="[2a0]"></a>blu_hw_service</STRONG> (Thumb, 610 bytes, Stack size 8 bytes, mdc_bt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = blu_hw_service &rArr; blu_resume_power &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_curMs
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_elapsedMs
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_factory
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_normal
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_resume_power
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blu_hw_set
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_blu_task
</UL>

<P><STRONG><a name="[2a3]"></a>hdmi_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mdc_hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = hdmi_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_version_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_input_select
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_init
</UL>

<P><STRONG><a name="[2a4]"></a>njw1195_write</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mdc_ana.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = njw1195_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_volume_set
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_input_set
</UL>

<P><STRONG><a name="[2a5]"></a>njw1195_input_set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdc_ana.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = njw1195_input_set &rArr; njw1195_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_pa_set
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_input_select
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_init
</UL>

<P><STRONG><a name="[2a6]"></a>njw1195_volume_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mdc_ana.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = njw1195_volume_set &rArr; njw1195_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_pa_set
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;njw1195_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_trimLevel_set
</UL>

<P><STRONG><a name="[2a7]"></a>HC595_Update</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mdc_ana.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HC595_Update &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi0_ctl
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_pa_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_input_select
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_set_power
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ana_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_mode_set
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_ana_sample_set
</UL>

<P><STRONG><a name="[2b1]"></a>hdmi_spi_shortDelay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_input_select
</UL>

<P><STRONG><a name="[2ab]"></a>hdmi_try_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = hdmi_try_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_version_get
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_set_run_app
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_bl_get_msg
</UL>

<P><STRONG><a name="[2ac]"></a>hdmi_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = hdmi_write &rArr; ring_buffer_write &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_v2_send_msg
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_input_select
</UL>

<P><STRONG><a name="[2ad]"></a>hdmi_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = hdmi_read &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_operate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_get_byte
</UL>

<P><STRONG><a name="[2ae]"></a>hdmiv2_get_byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = hdmiv2_get_byte &rArr; hdmi_read &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_ring_buffer_empty
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
</UL>

<P><STRONG><a name="[2af]"></a>hdmiv2_bl_get_msg</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = hdmiv2_bl_get_msg &rArr; hdmi_try_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_ms
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_try_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_version_get
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_set_run_app
</UL>

<P><STRONG><a name="[2b0]"></a>hdmiv2_set_run_app</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = hdmiv2_set_run_app &rArr; hdmiv2_bl_get_msg &rArr; hdmi_try_write &rArr; bsp_spi_operate &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_bl_get_msg
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_try_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_V2_init
</UL>

<P><STRONG><a name="[2b2]"></a>hdmiv2_volume_cmd_handler</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = hdmiv2_volume_cmd_handler &rArr; Send_SysTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SysTask_Msg
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_msg_handler
</UL>

<P><STRONG><a name="[2b7]"></a>hdmiv2_mute_cmd_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = hdmiv2_mute_cmd_handler &rArr; Send_SysTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SysTask_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_msg_handler
</UL>

<P><STRONG><a name="[2b8]"></a>hdmiv2_msg_handler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = hdmiv2_msg_handler &rArr; hdmiv2_volume_cmd_handler &rArr; Send_SysTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_mute_cmd_handler
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_volume_cmd_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_check_loop
</UL>

<P><STRONG><a name="[2b9]"></a>hdmiv2_check_loop</STRONG> (Thumb, 386 bytes, Stack size 144 bytes, mdc_hdmi_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = hdmiv2_check_loop &rArr; hdmiv2_msg_handler &rArr; hdmiv2_volume_cmd_handler &rArr; Send_SysTask_Msg &rArr; s_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_ring_buffer_empty
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdc_bus_select
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_msg_handler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmiv2_get_byte
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdmi_v2_task
</UL>

<P><STRONG><a name="[5c]"></a>USBHMSCClose</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbhmsc.o(i.USBHMSCClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBHMSCClose &rArr; USBHCDPipeFree &rArr; USBHostHubAddrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbhmsc.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>USBHMSCOpen</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, usbhmsc.o(i.USBHMSCOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBHMSCOpen &rArr; USBHCDPipeAllocSize &rArr; USBHostHubAddrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeConfig
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeAllocSize
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetInterfaceEndpoint
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbhmsc.o(.constdata)
</UL>
<P><STRONG><a name="[30f]"></a>ProcessUSBDeviceStateMachine</STRONG> (Thumb, 966 bytes, Stack size 64 bytes, usbhostenum.o(i.ProcessUSBDeviceStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ProcessUSBDeviceStateMachine &rArr; USBHCDDeviceDisconnected &rArr; OTGDeviceDisconnect &rArr; USBOTGSetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDControlTransfer
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetInterface
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostSpeedGet
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostReset
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHHubEnumerationError
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHHubEnumerationComplete
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBHCDSendEvent
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDescAlloc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInitInternal
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDDeviceDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDMain
</UL>

<P><STRONG><a name="[311]"></a>USBHCDDeviceDisconnected</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbhostenum.o(i.USBHCDDeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBHCDDeviceDisconnected &rArr; OTGDeviceDisconnect &rArr; USBOTGSetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGDeviceDisconnect
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBHCDSendEvent
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDescFree
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[313]"></a>USBHCDInitInternal</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, usbhostenum.o(i.USBHCDInitInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBHCDInitInternal &rArr; USBHCDPowerConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGSessionRequest
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBNumEndpointsGet
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLibDMAInit
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLPMIntEnable
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntEnableEndpoint
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntEnableControl
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostPwrEnable
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostLPMConfig
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostEndpointConfig
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHHubInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBTickInit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPowerConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDInit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUSBDeviceStateMachine
</UL>

<P><STRONG><a name="[30e]"></a>USBOTGSetMode</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usbmode.o(i.USBOTGSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBOTGSetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGSessionRequest
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostSuspend
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPowerAutomatic
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBHCDSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTGDeviceDisconnect
</UL>

<P><STRONG><a name="[43]"></a>DMAUSBIntHandler</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, usbdma.o(i.DMAUSBIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMAUSBIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[45]"></a>DMAUSBIntStatusClear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdma.o(i.DMAUSBIntStatusClear))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[46]"></a>DMAUSBStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbdma.o(i.DMAUSBStatus))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[49]"></a>iDMAUSBArbSizeSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBArbSizeSet))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[4a]"></a>iDMAUSBChannelAllocate</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbdma.o(i.iDMAUSBChannelAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iDMAUSBChannelAllocate
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[52]"></a>iDMAUSBChannelDisable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntDisable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[51]"></a>iDMAUSBChannelEnable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIsEnabled
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntEnable
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[4e]"></a>iDMAUSBChannelIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBChannelIntDisable))
<BR><BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[4d]"></a>iDMAUSBChannelIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBChannelIntEnable))
<BR><BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[50]"></a>iDMAUSBChannelRelease</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[4b]"></a>iDMAUSBChannelStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[4c]"></a>iDMAUSBIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBIntStatus))
<BR><BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[4f]"></a>iDMAUSBTransfer</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, usbdma.o(i.iDMAUSBTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iDMAUSBTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointPacketCountSet
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAEnable
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAConfigSet
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelEnable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelCountSet
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelConfigSet
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelAddressSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[53]"></a>iDMAUSBUnitSizeSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBUnitSizeSet))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[3b]"></a>uDMAUSBArbSizeSet</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBArbSizeSet))
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[3c]"></a>uDMAUSBChannelAllocate</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbdma.o(i.uDMAUSBChannelAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uDMAUSBChannelAllocate
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeDisable
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[3d]"></a>uDMAUSBChannelDisable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelDisable
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[3e]"></a>uDMAUSBChannelEnable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIsEnabled
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[40]"></a>uDMAUSBChannelIntDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelIntDisable))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[3f]"></a>uDMAUSBChannelIntEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelIntEnable))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[41]"></a>uDMAUSBChannelRelease</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeDisable
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[42]"></a>uDMAUSBChannelStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelStatus))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[44]"></a>uDMAUSBIntStatus</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbdma.o(i.uDMAUSBIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uDMAUSBIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelModeGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[47]"></a>uDMAUSBTransfer</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, usbdma.o(i.uDMAUSBTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uDMAUSBTransfer &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFIFOAddrGet
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointPacketCountSet
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAConfigSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[48]"></a>uDMAUSBUnitSizeSet</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usbdma.o(i.uDMAUSBUnitSizeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uDMAUSBUnitSizeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[353]"></a>USBHSCSISendCommand</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, usbhscsi.o(i.USBHSCSISendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBHSCSISendCommand &rArr; USBHCDPipeWrite &rArr; USBHCDControlTransfer &rArr; USBHostEndpointConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeWrite
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHCDPipeRead
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSITestUnitReady
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSIRequestSense
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSIReadCapacity
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSIRead10
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHSCSIInquiry
</UL>

<P><STRONG><a name="[386]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[379]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[37]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[2e0]"></a>_fp_value</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[38]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2e9]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[2f0]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
